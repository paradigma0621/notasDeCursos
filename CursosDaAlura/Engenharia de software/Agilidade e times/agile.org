* Material da Alura
** Agile x Waterfall (cascata)
Em seu início, a Engenharia de Software utilizava um modelo sequencial, o cascata ou Waterfall, em inglês. Mas, ao longo do tempo, devido ao fluxo de novas informações e mudanças no mercado, emerge a necessidade um novo modelo, daí surge o ágil ou Agile em inglês.

AP: Foi destacada a ideia que no Agile podemos fazer correções de construção do software durante o desenvolvimento do mesmo, não esperando chegar no final para aí validarmos se era aquilo que queríamos - caso que acontece no modelo Waterfall. Há a possibilidade de o cliente não ficar satisfeito com determinadas implementações, o que acarretaria em talvez ter de fazer mudanças significativas no software, possivelmente sendo inviável.
(obs: ver nesse documento: **** Metodologia cascata é ágil?)

Em projetos com um escopo de poucas mudanças ou uma entrega de longo prazo — como, por exemplo, a construção de um prédio ou ponte — não se aconselha utilizar o Scrum.
** Artigo 1
https://www.alura.com.br/artigos/o-que-e-metodologia-agil

O que é metodologia ágil?
Você já imaginou trabalhar de maneira mais flexível, ajustando e melhorando a condução do seu projeto ao longo do processo, combinando eficiência e flexibilidade às mudanças do mercado? Então a metodologia ágil pode ser uma opção para você!

A metodologia ágil é uma forma de gerir projetos, em que se busca a otimização dos processos. Em vez de seguir um plano rígido — como na gestão tradicional —, na metodologia ágil, podemos fazer ajustes e melhorias ao longo do desenvolvimento de projetos. Isso significa identificar e corrigir falhas rapidamente, garantindo resultados mais efetivos. Portanto, essa forma de gestão permite às pessoas gerentes uma abordagem moderna e eficiente para enfrentar desafios do mercado.

A utilização da agilidade promove uma cultura de colaboração e engajamento da equipe, pois a comunicação entre as pessoas do projeto é facilitada, o que permite a troca de ideias e o alinhamento constante dos objetivos. O foco está no trabalho em equipe e na entrega de valor ao cliente.

*** Quais são as principais características dos métodos ágeis?
Além da flexibilidade e da adaptação às mudanças, as principais características dos métodos ágeis são:

**** Iteratividade (repetição)
Ao contrário de uma gestão cascata, saiba que os métodos ágeis são baseados em ciclos iterativos e incrementais de trabalho. Isso porque o gerenciamento com essa abordagem é dividido em iterações menores, permitindo que partes funcionais do produto sejam entregues em intervalos regulares, no lugar de esperar até o fim do projeto para entregar um produto final. Isso porque os requisitos e as necessidades do projeto podem evoluir ao longo do tempo, e, em vez de resistir a mudanças, os métodos ágeis abraçam-nas e estão preparados para se adaptar rapidamente aos novos contextos.
**** Colaboração
Esses métodos também incentivam tanto a colaboração quanto a comunicação entre todas as pessoas da equipe, bem como com os stakeholders do projeto. Uma das características das equipes ágeis é trabalhar de forma interdisciplinar, promovendo a troca constante de ideias, conhecimentos e experiências.
**** Autonomia e empoderamento das equipes
E, por sua vez, a colaboração gera mais autonomia e empoderamento dessas equipes, pois as pessoas são incentivadas a se auto-organizarem, a tomar decisões e a definir o melhor caminho para atingir os objetivos do projeto.
**** Entrega de valor
Esses atributos dos métodos ágeis e sua cultura de experimentação favorecem a entrega de valor, pois, ao priorizarem entregas contínuas e incrementos de valor em cada iteração, permitem que clientes e stakeholders obtenham benefícios tangíveis mais cedo e possam fornecer feedbacks para orientar o desenvolvimento do projeto.
*** Quando devo optar pelo método ágil?
Depois de conhecer as principais características dessa metodologia, uma dúvida que você pode ter é: quando devo optar pelo método ágil? A resposta é depende. Uma maneira de analisar a necessidade de optar pela agilidade é compreender o nível de complexidade dos projetos que são trabalhos e o nível de complexidade do seu negócio. Isso pode ser feito por meio do framework Cynefin.

Esse framework fornece um modelo para analisar o contexto no qual um problema ou uma situação está inserida e sugere abordagens apropriadas com base nessa análise. O Cynefin classifica os problemas em quatro domínios: simples, complicado, complexo e caótico.

Se seu projeto estiver no domínio complexo, em que há incerteza, múltiplos fatores interdependentes e falta de soluções claras, as metodologias ágeis podem ser mais adequadas, já que, neste domínio, elas oferecem flexibilidade, adaptação contínua e capacidade de responder às mudanças de forma ágil.

No entanto, se estiver no domínio simples ou complicado, em que as causas e as soluções são conhecidas e previsíveis, outras abordagens mais estruturadas, como o modelo cascata, podem ser mais apropriadas.

 A partir da compreensão do Cynefin, entendemos que são necessárias diferentes abordagens para problemas distintos, e as metodologias ágeis devem ser consideradas quando há complexidade e incerteza significativas.
*** Quais são as metodologias ágeis? Exemplos
Existem diferentes tipos de metodologias ágeis, cada uma com suas próprias características e objetivos específicos. Entre os mais conhecidos estão o Kanban, o Lean, o XP (Extreme Programming) e o Crystal. Além disso, temos alguns dos frameworks ágeis mais conhecidos, como o Scrum, o SAFe (Scaled Agile Framework), o LeSS (Large-Scale Scrum) e o Nexus.

Tanto as metodologias ágeis quanto os frameworks ágeis, são ferramentas essenciais para aprimorar a gestão de projetos e o sucesso das equipes no desenvolvimento de softwares e em outras áreas. Conheça melhor cada um deles a seguir.

**** Kanban
O método Kanban enfatiza a visualização do trabalho, a limitação do trabalho em progresso ou Work In Progress (WIP) e a melhoria contínua do processo. O Kanban utiliza um quadro Kanban, no qual as tarefas são representadas em cartões e movidas pelas diferentes etapas do fluxo de trabalho. Saiba mais sobre este método no artigo Kanban: o que é o Método Kanban, principais conceitos e como funciona no dia a dia (https://www.alura.com.br/artigos/metodo-kanban).
**** Lean
O método Lean, também conhecido como Lean Thinking ou Pensamento Enxuto, em português, é uma abordagem de gestão originada no sistema de produção da Toyota, conhecido como Toyota Production System (TPS). Nesse método, procura-se otimizar os processos, identificando e eliminando desperdícios, e criar uma cultura de melhoria contínua, em que cada pessoa da equipe é incentivada a contribuir para a identificação e a solução de problemas. Apesar da sua origem na indústria manufatureira, o método tem sido aplicado com sucesso em diversos setores, como: serviços, saúde, tecnologia e desenvolvimento de software.
**** XP
Criado por Kent Beck e sua equipe no fim da década de 1990, o Extreme Programming (XP) é uma metodologia ágil de desenvolvimento de software que enfatiza práticas de engenharia de software e colaboração efetiva entre os membros da equipe. Ele busca fornecer um processo iterativo e adaptativo para entregar softwares de alta qualidade. O XP se baseia em uma série de práticas-chave que são implementadas em conjunto para promover resultados de alta qualidade e adaptabilidade às mudanças, que incluem: programação em pares, desenvolvimento orientado a Testes (TDD), integração contínua, refatoração e melhoria constante, entre outras.
**** Crystal
O Crystal é uma família de metodologias ágeis que foram desenvolvidas por Alistair Cockburn. Essas metodologias se adaptam a diferentes tipos de projetos e equipes, reconhecendo que não existe uma abordagem única que funcione para todos os contextos. O Crystal valoriza a comunicação efetiva, o trabalho em equipe e a adaptação às necessidades específicas do projeto, promovendo a entrega contínua de software de alta qualidade. Ele oferece uma série de práticas e diretrizes flexíveis para ajudar as equipes a alcançarem o sucesso em seus projetos, levando em consideração o tamanho, a criticidade e o ambiente do projeto.

**** Scrum
O Scrum é um framework ágil que visa facilitar a colaboração, a adaptação e a entrega de valor de forma iterativa e incremental. Ele se baseia em três pilares fundamentais: transparência, inspeção e adaptação. O Scrum divide o trabalho em iterações chamadas de Sprints, que geralmente têm duração de duas a quatro semanas e utiliza artefatos como o Product Backlog e o Sprint Backlog, além de cerimônias como as reuniões de planejamento, revisão e retrospectiva. O framework inclui papéis, como Scrum Master e Product Owner, eventos, como reuniões diárias de acompanhamento e revisões de sprint. Com um enfoque na auto-organização e na colaboração da equipe, o Scrum promove uma abordagem flexível para lidar com mudanças e busca maximizar o valor entregue ao cliente.
**** SAFe
O SAFe (Scaled Agile Framework) é um framework escalável para adoção ágil em grande escala. Ele fornece uma estrutura abrangente para organizações que desejam implementar e coordenar práticas ágeis em múltiplos níveis, desde equipes até portfólios. O SAFe se baseia em princípios ágeis e incorpora elementos do Lean, Scrum e Kanban, entre outras práticas. Ele oferece orientação para a definição de papéis, estruturas de equipe, planejamento de releases, gestão de requisitos e acompanhamento do progresso. O objetivo do SAFe é promover a colaboração, a eficiência e a entrega de valor contínua em ambientes empresariais complexos, permitindo a adoção ágil em larga escala.
**** LeSS
O LeSS (Large-Scale Scrum) é um framework ágil para escalar o Scrum em ambientes com múltiplas equipes trabalhando em um mesmo produto ou projeto. Ele visa simplificar e adaptar o Scrum para cenários de escala, mantendo a sua essência e seus valores fundamentais. O LeSS promove a colaboração, a transparência e o trabalho em equipe em toda a organização, buscando eliminar complexidades desnecessárias e promover a entrega de valor contínua. Tenha em mente que ele oferece orientações sobre como organizar as equipes, as cerimônias e os artefatos do Scrum em um contexto de escala, incentivando a comunicação efetiva, a descentralização e a aprendizagem organizacional. Com o LeSS, as organizações podem escalar o Scrum de forma ágil, mantendo a flexibilidade, a produtividade e a qualidade em projetos complexos.
*** Qual o objetivo da metodologia ágil?
Os principais objetivos da metodologia ágil são:

**** Reduzir os desperdícios
pois procuram identificar e minimizar desperdícios de recursos, tempo e esforços, visando à eficiência e à otimização dos processos de trabalho;

**** Melhoria contínua
já que buscam constantemente melhorar a eficiência, a qualidade e a produtividade por meio de ciclos de inspeção e adaptação, promovendo a identificação e a resolução de problemas, bem como a busca por melhores práticas e processos;

**** Foco na qualidade
porque priorizam a qualidade do produto ou serviço, incentivando práticas de desenvolvimento de software de alta qualidade, testes frequentes, revisões e melhorias contínuas;

**** Entrega contínua de valor
uma vez que o foco principal é fornecer produtos ou serviços de alta qualidade e valor, de forma constante e iterativa, priorizando o feedback e a satisfação de clientes.

*** Quais as 6 funções da metodologia ágil?
Ao longo da utilização dos métodos ou frameworks ágeis para o gerenciamento de projetos, as metodologias ágeis cumprem várias funções importantes para ajudar a validar a estratégia durante os projetos. Entre essas funções, você pode conferir:

- Adaptabilidade: permitindo ajustes contínuos com base em feedback e novas informações;
- Feedback contínuo: garantindo a validação da estratégia com base nas necessidades reais dos stakeholders;
- Transparência: oferecendo visibilidade clara do progresso e resultados alcançados;
- Entrega de valor contínua: validando a estratégia por meio de resultados tangíveis;
- Experimentação e aprendizado: permitindo ajustes com base em insights obtidos;
- Colaboração e engajamento: aproveitando o conhecimento coletivo para validar a estratégia e alinhar expectativas.

Dentro desse contexto é importante que as equipes que trabalham com agilidade saibam gerenciar as expectativas das pessoas interessadas no projeto. Gerenciar expectativas envolve comunicar claramente as características, os benefícios e os desafios das metodologias ágeis, estabelecendo uma compreensão compartilhada dos resultados esperados e dos limites da abordagem ágil. Isso ajuda a evitar mal-entendidos, frustrações e resistência.
*** Caso exemplar
**** Como aplicar a metodologia ágil na sua empresa?
Neste artigo, conto como decidimos parar de seguir a metodologia em cascata e seguir uma metodologia mais fluida.

Uma vez, fui contratada por uma empresa que desenvolvia softwares e aplicativos para outras companhias. Nela, um dos meus primeiros trabalhos era auxiliar no desenvolvimento de um aplicativo que visa permitir que as pessoas encontrem restaurantes baratos perto de onde elas se encontram.

Quando conheci o time, já me explicaram que eles seguiam uma estrutura clássica: planejamento, análise, design, documentação, codificação, realizar testes, implementar e, caso necessário, fazer a manutenção do aplicativo.

*Essa é uma metodologia de desenvolvimento chamada em cascata, que significa que o processo é realizado por meio de fases, e uma delas só é iniciada quando a anterior termina e, assim, não é necessário retornar a um trabalho, já que ele já foi completamente finalizado.*

Porém, por eu e a equipe levarmos muito tempo nas etapas de planejamento, análise e documentação de todo o projeto, o cliente ficou impaciente por não termos mostrado novidades a ele.

Além disso, o que havíamos feito não poderia ser apresentado para o cliente, já que a documentação é para consulta de pessoas analistas, arquitetas, desenvolvedoras e testers do projeto, ou seja, não era para o cliente.

Então, ele nos informou que o software agora tinha uma finalidade diferente da inicial. Tentamos mudar, porém, precisaríamos analisar, planejar e começar a documentação toda de novo. Pensando no tempo que demoramos para fazer isso, o cliente cancelou e, assim, o trabalho inteiro foi jogado fora.

Vimos que este método não estava mais funcionando. E qual foi o nosso erro?
**** Agilidade
Começamos a pensar em maneiras para agilizar ainda mais os próximos projetos. Então, decidimos parar de seguir essa metodologia em cascata e seguir uma metodologia mais fluida.

Mas aí, nos ocorreram várias dúvidas: como podemos fazer isso? Acabar com todas as regras?

Pensando nisso, dividimos as tarefas entre todos os integrantes da equipe. Assim, decidimos que cada pessoa pegaria uma questão definida para ser feita naquele mês e iria desenvolvê-la.

Quando começamos o projeto, fomos o desenvolvendo desta maneira: as tarefas foram divididas e cada uma atribuída a quem tinha mais facilidade em desenvolvê-la.

Porém, como a equipe se dividiu, não sabíamos o que cada um estava fazendo e qual parte estava pronta ou não. Isso, com o passar do tempo, começou a nos deixar perdidos a respeito de qual fase estávamos e quando podíamos começar a desenvolver outro requisito.

Esse cenário piorou quando fomos apresentá-lo ao cliente, pois, como não sabíamos como estava cada fase, algumas partes estavam completamente avançadas e outras ainda estavam no início.

Sem contar que algumas pessoas estavam tendo muita dificuldade em realizar suas tarefas, porém, não conseguiam pedir ajuda, pois não havia uma comunicação entre a equipe.

Também tínhamos os requisitos, mas não sabíamos o porquê eles eram necessários e isso nos deixava perdidos, sem saber como utilizá-los da melhor forma para entregar o projeto ao usuário.

Percebemos que um método sem regras não estava funcionando também. Mas como poderíamos resolver, já que não fazia sentido voltar para as regras que também não haviam funcionado?

Então, decidimos tentar colocar algumas premissas para serem cumpridas durante o processo.
**** Os indivíduos e as interações entre eles mais que os processos e as ferramentas
Como percebemos que estava havendo um obstáculo para a equipe falar em que ponto estava tendo dificuldade, decidimos que deveríamos ter mais integração entre nós, por meio de almoços e conversas durante o café.

Além disso, conhecer o trabalho uns dos outros, por meio de reuniões em que cada pessoa poderia dizer o que estava fazendo, o que faria a seguir e se estava tendo alguma dificuldade ou facilidade. Nelas, planejamos o que faríamos a seguir e integramos toda a equipe no processo de desenvolvimento.

Processos e ferramentas são importantes, mas eles são feitos e utilizados, respectivamente, pela equipe. Já a interação entre ela deve estar fluida e equilibrada para que a eficácia dos processos e das ferramentas ocorra sem grandes problemas.

Ainda, para cada requisito, ao invés de escrevermos o que precisamos fazer, como “adicionar um campo de busca”, escrevemos como aquilo ajudará o usuário. Dessa forma, podemos escrever, por exemplo: “o usuário precisa pesquisar termos para encontrar as funcionalidades do software de maneira mais rápida”.
**** Software funcionando mais do que documentação completa e abrangente
Como perdemos muito tempo com a documentação, e ela não agrega muito valor ao cliente, decidimos que nosso foco seria mais no desenvolvimento.

Assim, quando recebemos um projeto, analisamos como cada requisito pode ajudar o usuário e começamos a desenvolvê-lo.

Dessa forma, temos menos trabalho com documentação, já que fazemos por partes, ao mesmo tempo que desenvolvemos o software e o apresentamos ao cliente.
**** Colaboração com o cliente mais do que negociação de contratos
Também definimos que o cliente deveria estar mais presente em todo o processo de desenvolvimento, avaliando o que foi feito e nos indicando as próximas prioridades.

Além disso, dessa forma, caso o projeto precise de qualquer outra coisa, o cliente pode facilmente nos avisar, pois ele faz parte do projeto e participa de cada etapa.

Para ter essa colaboração frequentemente, marcamos uma reunião por mês com o cliente. Nela, mostraremos o que foi feito e receberemos novas demandas ou alterações das anteriores, sem precisar jogar o projeto inteiro fora, pois, caso tenha alguma mudança, saberemos com antecedência.
**** Resposta às mudanças mais do que seguir o plano inicial
Como as necessidades do cliente e do projeto podem mudar a qualquer momento, precisamos sempre nos atentar. Assim, ao invés de planejarmos todo o projeto de uma vez, agora planejamos cada etapa individualmente e em conjunto com o cliente.

Por termos esse contato mais direto com o cliente e por fazermos o projeto por partes, podemos nos adaptar às mudanças de forma mais rápida, já que é possível replanejar somente uma parte, quando necessário, e não o projeto todo.

Depois de alguns meses, essa nova estratégia estava apresentando bons resultados por conta dos benefícios trazidos por aquele método, entre eles:

- Satisfação do cliente;
- Melhor gestão de prioridades;
- Melhor visibilidade dos projetos, uma vez que todos sabiam o que estava acontecendo nele;
- Maior produtividade da equipe, pois ela estava mais motivada por seguirmos um ritmo saudável e simplificado de desenvolvimento.

Foi quando um novo integrante foi contratado para a equipe; assim que explicamos como tínhamos organizado as tarefas, ele nos respondeu que era uma metodologia ágil, e que a maneira que fazíamos seguia os valores do manifesto ágil.

*** Manifesto Ágil
O Manifesto para o Desenvolvimento Ágil de Software foi escrito em 2001 por um grupo de 17 pessoas desenvolvedoras. Elas agruparam e aprimoraram diversos conceitos de metodologia de desenvolvimento ágil no manifesto.

Esses conceitos iam pelo caminho contrário ao método em cascata, ou seja, rígido, em que as regras e as etapas devem ser seguidas. A metodologia ágil fica no meio-termo entre o rígido e o livre.

Esse manifesto conta com quatro valores e doze princípios que devem ser incluídos na rotina das empresas.

Os valores, que já estávamos seguindo são:
- Os indivíduos e a interação entre eles mais do que os processos e as ferramentas;
- Software funcionando mais do que documentação completa e abrangente;
- Colaboração com o cliente mais do que negociação de contratos;
- Contratos e resposta às mudanças mais do que seguir o plano inicial.

Isso não quer dizer que apenas a parte antes do “mais do que” seja importante, porém, ela é a prioridade.

Agora, confira quais são os princípios dos métodos ágeis por trás dos valores, que devem ser mantidos sempre em mente enquanto o software estiver sendo desenvolvido:

- A maior prioridade é satisfazer o cliente por meio da entrega adiantada e contínua de software de valor;

- Aceitar mudanças de requisitos, mesmo no fim do desenvolvimento. Processos ágeis se adequam às mudanças, para que o cliente possa tirar vantagens competitivas;

- Entregar software funcionando com frequência, preferencialmente em semanas;

- Cooperação diária entre pessoas que entendem do “negócio” e desenvolvedores;

- Projetos surgem por meio de indivíduos motivados, entre os quais existe relação de confiança.

- A maneira mais eficaz e eficiente de transmitir informações são por meio de conversas cara a cara;

- Software funcionais são a principal medida de progresso do projeto;

- Processos ágeis promovem um ambiente sustentável. Os patrocinadores, os desenvolvedores e os usuários devem ser capazes de manter indefinidamente passos constantes;

- Contínua atenção à excelência técnica e bom design aumenta a agilidade;

- Simplicidade é essencial. Cultivar a arte de maximizar a quantidade de trabalho que não precisou ser feito;

- As melhores arquiteturas, requisitos e projetos emergem de equipes auto-organizadas;

- Em intervalos regulares, o time reflete sobre como se tornar mais efetivo, então, se ajustam e otimizam seu comportamento de acordo.

O manifesto ágil é como se fosse o embasamento filosófico para as metodologias ágeis. Baseado nesses valores e princípios, muitas foram criadas. Entre elas, o Scrum, o Kanban e o EXtreme Programming, conhecido como XP.

Agora que nossa equipe já conhece os valores do manifesto ágil, podemos utilizar algumas das metodologias para seguir no dia a dia do desenvolvimento.
*** Perguntas Frequentes:
**** Qual a metodologia ágil mais utilizada?
Isso pode variar, pois as metodologias ágeis são indicadas para diferentes casos. Contudo, o Kanban, o XP (Extreme Programming) e o Lean são amplamente adotados e podem ser preferidos em diferentes situações, dependendo do contexto e das preferências da organização. Já o Scrum, como framework ágil, é amplamente utilizado em várias indústrias e organizações de diferentes tamanhos. O Scrum é valorizado por sua simplicidade, adaptabilidade e foco na entrega contínua de valor ao cliente. Ele oferece uma estrutura clara de papéis, cerimônias e artefatos que ajudam as equipes a gerenciar e controlar o trabalho de forma eficaz. Mas a escolha da metodologia ou do framework, deve obedecer às necessidades específicas de cada projeto ou organização.

**** Metodologia cascata é ágil?
Não. A metodologia cascata e a metodologia ágil se diferenciam pela sua abordagem. Os métodos ágeis têm um enfoque iterativo e incremental no desenvolvimento de projetos, valorizam a entrega contínua de valor com foco na colaboração entre a equipe de desenvolvimento e o cliente. Por outro lado, o método cascata segue uma abordagem linear, em que cada fase do projeto é concluída antes de passar para a próxima fase. Além disso, o escopo, os requisitos e as etapas do projeto são definidos no início do processo e seguidos rigidamente até a entrega final, o que significa que é menos adaptável às mudanças, ao contrário da metodologia ágil.

** Curso: Scrum: agilidade em seu projeto
https://cursos.alura.com.br/course/scrum-agilidade-seu-projeto
AP: pronúncia: "íscrãm"
*** O que é Scrum
Nesta aula, você pôde:
Reconhecer a origem do conceito de Scrum, uma analogia criada na década de 1980 por Nonaka e Takeuchi que se referia à formação chamada "scrum" do esporte Rugby e a relacionava a projetos de desenvolvimento de produtos que usavam equipes pequenas, colaborativas e multidisciplinares que eram altamente eficazes em suas entregas.

Identificar como o conceito de Scrum foi adaptado para o mercado de tecnologia nos anos 1990 pelos desenvolvedores de software Jeff Sutherland e Ken Schwaber, virando um famoso framework de metodologia ágil que pode hoje ser implementado em diferentes contextos e mercados por meio das diretrizes do Scrum Guide.

Entender que o processo do Scrum é baseado em um modelo de trabalho iterativo, em que ciclos curtos de projeto possibilitam ter um feedback inicial do usuário sobre a solução em desenvolvimento, permitindo que se possa eliminar tudo aquilo que não agrega valor. Logo, projetos que usam Scrum se diferenciam da forma tradicional de gerir projetos, baseada no modelo de trabalho waterfall, que contempla um fluxo de processos sequenciais. Ou seja, primeiro, há um planejamento; depois, a execução; por fim, o lançamento e a validação da solução apresentada.

Reconhecer os principais benefícios de utilizar o Scrum em negócios, incluindo projetos de empresas que não são da área de TI. Entre esses benefícios estão: uma visão sistêmica do projeto, que auxilia gestores a enxergarem os problemas que impedem a produtividade e a eficiência do time; um maior alinhamento entre a equipe, fator que auxilia na colaboração, na autonomia e na motivação do time; possibilidade de medir o tempo de execução de cada tarefa para aumentar a agilidade dos processos de projeto; redução do desperdício de recursos e tempo, o que resulta na entrega de uma solução mais assertiva e de acordo com as necessidades das pessoas usuárias.

Compreender que, por ter uma estrutura flexível e funcional, o Scrum Framework pode ser adaptado a diferentes tipos de problemas de negócio. Porém, apenas em projetos em que os requisitos não são plenamente conhecidos ou que podem mudar durante o desenvolvimento do produto.
*** Scrum Framework
**** Pilares e valores do Scrum
Os três pilares do Scrum - Transparência, Inspeção e Adaptação - são conceitos fundamentais que sustentam a eficácia do framework Scrum. A transparência refere-se à clareza e à visibilidade de todas as informações relevantes sobre o trabalho realizado pelo time Scrum. A inspeção envolve a avaliação constante do trabalho realizado e dos resultados obtidos para identificar problemas e oportunidades de melhoria. A adaptação implica em ajustar e melhorar continuamente o processo de trabalho com base nas informações obtidas durante a inspeção. Tenha em mente que esses três pilares são interdependentes e essenciais para garantir a melhoria contínua e o sucesso do Scrum em projetos ágeis.
**** Scrum Framework
Aprendemos na aula anterior que o Scrum é um Framework, ou seja, uma ferramenta que ajuda a gerenciar projetos de forma ágil.

O Scrum tem uma estrutura simples e flexível, capaz de ser adaptada a diferentes contextos e projetos. Porém, é importante que você saiba que para aplicá-lo corretamente é preciso seguir alguns passos e delegar algumas funções.

Na prática, quando as empresas usam o Scrum acabam fazendo muitas adaptações no processo. Isso pode se transformar em um problema, afinal, essa ferramenta é eficaz justamente devido à lógica de aplicação.

Vamos descobrir como começar a utilizar o Scrum em projetos.

***** Estrutura do Scrum
Para começar a aplicar o Scrum é preciso entender a estrutura da ferramenta e os principais elementos que compõem o Framework.

Esse conhecimento é fundamental para compreender seu funcionamento e consequentemente como colocá-lo em prática no seu projeto.

De forma geral, a estrutura do Scrum é simples. Porém, existem algumas diretrizes gerais que orientam o processo de projeto.

Diferente de outras metodologias e ferramentas de negócio, o Scrum não oferece um passo a passo detalhado de como deve ser executado. Ao invés disso, o Framework orienta valores, funções e interações.

****** Valores
Os valores são responsáveis por guiar todo processo de decisão ao longo do projeto, por isso, são muito importantes.

Valores do Scrum definidos pelo Scrum Guide, que devem ser seguidos ao aplicar o framework: Compromisso, Foco, Abertura, Respeito e Coragem.

****** Funções
Se referem ao ato de delimitar quais pessoas vão desempenhar determinados papeis no processo de projeto.

****** Interações
Além disso, também é preciso que durante todo esse processo os profissionais tenham interações. Isso irá fazer com que o time consiga entregar um produto, serviço ou solução na melhor qualidade e menor tempo possível.

***** O Framework possui alguns elementos-chave, sendo eles os:
Cada um desses componentes são essenciais para garantir o sucesso do seu projeto.
****** Papéis
Os papéis se referem a ocupação que cada membro deve ter no projeto. O Scrum delimita três papéis fundamentais, sendo eles:

Scrum Master;
Product Owner;
Development Team.
Usamos as nomenclaturas em inglês, pois nesse curso estamos usando como base o Scrum Guide. No Brasil, o Product Owner é geralmente chamado de PO ou dono do produto. O time de desenvolvimento pode ser chamado de devs ou developers.

****** Artefatos
O segundo elemento do Scrum são os artefatos, ou seja, as informações essenciais para o andamento correto do projeto. É a partir disso que toda equipe consegue orientar seu trabalho, ou seja, saber o que está acontecendo e o que deve ser entregue.

Lembra do pilar chamado transparência? Ele está diretamente relacionado aos artefatos, afinal, quanto mais informação acessível o time tiver, maior será a efetividade do trabalho.

Alguns artefatos fundamentais são:

Product backlog;
Sprint backlog;
Incrementos.
****** Eventos
Os eventos são encontros fixos que o time tem ao longo do desenvolvimento do projeto. São momentos de interação planejados e essenciais, pois possuem uma data e horário fixo, justamente para otimizar a agenda e evitar que o foco seja perdido.

Cada evento é uma oportunidade para colocar em prática outro pilar do Scrum, a inspeção.

Lembrando que a inspeção é quando analisamos o que está sendo feito. Fazer isso nas reuniões é muito positivo para toda equipe.

O Scrum Guide define cinco diferentes eventos oficiais:

Sprint planning;
Sprint, Daily Scrum;
Sprint review.;
Sprint Retrospective.
No Brasil a Sprint review pode ser chamada de reunião de revisão, assim como a Sprint Retrospective de reunião de retrospectiva.

Nas próximas aulas aprenderemos de forma detalhada cada um desses elementos.

***** Processo do Scrum
No processo do Scrum há uma definição de ciclos de trabalho e profissionais responsáveis.

(ver: (Aula02-Imagem1.jpg")
Esquema representando a estrutura do Scrum. Do lado esquerdo da tela, visualizamos três artefatos do Scrum e os papeis das pessoas responsáveis por essas atividades. O primeiro é o Product backlog feito pelo Product owner, seguido pela Sprint planning e a Sprint backlog, ambas feitas por todo o time. Dessa estrutura, sai uma seta, apontando para o restante do processo Scrum composto pela Sprint semanal, organizada pelo Scrum Master, a Daily Scrum e os incrementos responsável por todo o time
O fluxo de trabalho do Scrum é totalmente interativo e incremental, ou seja, a solução vai sendo desenvolvida em pequenos ciclos de trabalho até a versão final ser entregue.

Dessa forma é possível desenvolver uma determinada solução e avaliar como ela está se comportando, antes de entregá-la.

É preciso lembrar que a ideia central do Scrum é adicionar valor a solução que está sendo desenvolvida.

Agora, vamos descobrir como o Scrum funciona. Tudo começa com o Product owner ou dono do produto, que irá representar o usuário final ou o cliente do projeto. Esse profissional é o responsável por estabelecer as prioridades do projeto e as necessidades do cliente.

A partir disso ele irá elaborar um artefato chamado Product backlog, uma lista com todas essas necessidades, funcionalidades e detalhes essenciais para desenvolvimento da solução.

O product backlog norteia todo o trabalho da equipe de desnvolvimento, por isso é muito importante que ele seja detalhado e bem orientado.

Antes de começar a desenvolver de fato a solução, a equipe de desenvolvimento se reúne em um evento chamado Sprint planing. Nela, o o time analisa o Product backlog e começa a planejar como será o trabalho futuro.

Em seguida, a equipe começa a dividir o trabalho em pequenos ciclos com tempo pré-determinado, as Sprints. Nessa etapa o time irá fazer a divisão de trabalho e determinar quais tipos de atividades devem ser cumpridas em cada um dos ciclos de trabalho.

Normalmente as sprints ocorrem entre uma e quatro semanas. Isso dependerá do tipo de projeto.

Logo após acontece a Sprint backlog, nela são levantados os objetivos de cada sprint, assim como as atividades e pessoas que devem realizá-las.

Seguindo o fluxo de trabalho, o time de desenvolvimento inicia uma sprint e começa a desenvolver a solução.

Nesse processo também ocorrem as Dailys scrum, reuniões diárias de alinhamento entre a equipe sobre o que está sendo feito na sprint, além levantar e solucionar possíveis problemas na execução.

No fim de cada Sprint o time de desenvolvimento entrega o incremento do produto ou serviço, podendo ser algo que possa ser usado ou testado pelo usuário final, equipe e stakeholders.

A apresentação do incremento ocorre em um evento chamado Sprint review ou revisão da Sprint. Nela também é discutido os desafios enfrentados no desenvolvimento do produto, o que pode ser melhorado ou acrescentado.

Depois disso, o time se reúne em outro evento chamado Sprint retrospectiv ou retrospectiva da Sprint, nesse momento o time avalia todo o processo de trabalho, levantando pontos de melhoria para a próxima sprint.

Após essas etapas, o ciclo de trabalho se reinicia.

Com o fluxo de trabalho do Scrum a solução vai sendo desenvolvida e avaliada de forma simultânea. Isso faz com que no fim do processo o produto seja mais assertivo.

É muito importante que você aprofunde o conhecimento nos principais elementos do Scrum. Esse conhecimento é fundamental para que você e toda equipe consigam aplicá-lo da melhor forma possível.

Isso envolve entender quem deve desempenhar cada um dos papéis propostos pelo Framework, como quando realizar cada um dos eventos ou quando criar cada um dos artefatos apresentados nessa aula.

Na aula seguinte, aprenderemos quais são os principais papeis do Scrum e as competências necessárias.

*** Papéis dentro do Scrum
**** Product Owner
***** Aula
No contexto do projeto Scrum, o papel equivalente à pessoa atendente é o Product Owner. É responsabilidade do Product Owner compreender as necessidades de um cliente específico, bem como qualquer outra informação essencial para iniciar o projeto.

É o profissional responsável por materializar os desejos e necessidades das pessoas clientes no projeto. Em outras palavras, essa pessoa será a porta-voz da pessoa cliente junto ao time de pessoas desenvolvedoras e às demais partes da empresa.

A pessoa que desempenha a função de Product Owner deve sempre conciliar os interesses da empresa responsável pelo desenvolvimento da solução com os interesses das pessoas usuárias ou clientes dessa solução, independentemente do projeto.

Stakeholders
Ressaltando que o Product Owner (PO) é um indivíduo, não uma equipe. No entanto, essa pessoa pode representar as necessidades de diferentes stakeholders, ou seja, de diversas partes interessadas envolvidas no projeto.

*Stakeholders são as partes interessadas ou envolvidas em um projeto, como clientes, usuários, acionistas, equipe de desenvolvimento e outros. Eles têm interesse, influência ou impacto direto no projeto e suas necessidades devem ser consideradas para alcançar os objetivos. Gerenciar as expectativas e envolvimento dos stakeholders é essencial para o sucesso do projeto.*

Por isso, a pessoa profissional escolhida para desempenhar o papel de Product Owner (PO) deve ter um amplo conhecimento sobre negócios tanto da parte do cliente quanto da empresa e suas particularidades. Afinal, essa pessoa é a responsável por comunicar ao cliente o que a empresa pode ou não desenvolver durante o projeto.
***** Responsabilidades do Product Owner
Responsabilidades da pessoa Product Owner
Ao nos referirmos a rotina de uma pessoa Product Owner, temos algumas responsabilidades principais:

- Definir requisitos do produto
- Alinhar as entregas do time
- Gerenciar e atualizar product backlog
- iniciar e/ou cancelar uma Sprint

A função do Product Owner é definir todos os requisitos do produto ou solução em desenvolvimento. Além disso, ele deve alinhar as ideias da equipe Scrum, preferencialmente por meio de um cronograma que contenha as principais atividades e as pessoas responsáveis por elas.

O Product Owner também é responsável por gerenciar e atualizar o product backlog, que deve ser acessível a todos os membros da equipe para garantir que todos saibam o que é esperado do projeto. Por fim, o Product Owner é responsável por iniciar e cancelar sprints, quando necessário. Essa tarefa é exclusiva do profissional que desempenha a função de Product Owner.

***** Questão da Alura
Maria e Cláudio possuem uma startup que vende sistemas de gestão financeira na nuvem para outras empresas. Para auxiliar no desenvolvimento de software, resolveram aplicar Scrum. Para isso, estão buscando um de seus colaboradores para ser Product Owner.

Neste contexto, qual das seguintes alternativas apresenta uma característica (ou perfil desejável) para uma pessoa que deseja se tornar um Product Owner?
****** Compreensão do negócio e das necessidades dos clientes e usuários.
Alternativa correta
Essa é uma característica fundamental para uma pessoa que deseja ser Product Owner, uma vez que precisa entender o contexto de negócio em que o produto será utilizado e também as necessidades de clientes e usuários. Esse conhecimento é básico para poder tomar decisões assertivas sobre o product backlog, garantindo que o produto atenda aos requisitos e aos objetivos de negócio.
****** Capacidade de gerenciar o desenvolvimento do produto/solução em um projeto.
Alternativa incorreta
Uma pessoa Product Owner não é responsável por gerenciar o processo de desenvolvimento de software. Essa é uma responsabilidade da equipe de desenvolvimento, liderada por uma pessoa Scrum Master.
		
**** Scrum Master
Isso ocorre porque o Scrum Master é responsável por capacitar o restante da equipe em relação aos processos Scrum, garantindo que cada membro entregue o melhor trabalho possível, no menor período de tempo e com maior eficiência.

***** Teoria e prática Scrum
Segundo o Scrum Guide, a pessoa que assume o papel de Scrum Master é responsável por garantir que não apenas a equipe Scrum, mas também a organização ou empresa em que o projeto está sendo realizado, compreendam tanto a teoria quanto a prática do Scrum.

Quando falamos da teoria do Scrum, estamos nos referindo aos valores e pilares que fundamentam a aplicação dessa metodologia. Por outro lado, a prática envolve os eventos, artefatos, processos e etapas que fazem parte do framework Scrum.

Isso acontece porque o Scrum Master é responsável pela eficácia da equipe Scrum, ou seja, garantir que todos os membros possam aplicar corretamente o processo Scrum.

Vale ressaltar que o Scrum Master não atua como um fiscal de processos no projeto, nem assume as funções dos membros da equipe que não estão desempenhando suas respectivas tarefas. Pelo contrário, é a pessoa que ao exercer a função se torna menos necessária possível ao longo do projeto.

O que isso significa?

***** O Scrum Master deve:
- Aumentar a autonomia do time Scrum
- Ter um conhecimento técnico sobre Scrum
- Entender e saber lidar com pessoas

A pessoa encarregada de desempenhar o papel precisa conceder autonomia à equipe Scrum, capacitando os membros no uso da ferramenta. Isso implica em ensinar como aplicar o Scrum e como adotar uma mentalidade alinhada com os princípios do Scrum. Assim, os membros do time consequem de autogerenciar e executar suas funções sem uma grande necessidade de interferência do Scrum Master.

Para exercer essa função, a pessoa Scrum Master deve possuir um amplo conhecimento técnico sobre o Scrum, como mencionado anteriormente. Além desse conhecimento técnico, o Scrum Master deve possuir competências e habilidades comportamentais necessárias para desempenhar o papel, incluindo habilidades de lidar com pessoas.

Essa responsabilidade recai sobre a pessoa Scrum Master, pois ela atua como uma observadora dentro da equipe durante todo o projeto. Ela é capaz de identificar quando surge um problema e um membro da equipe não o relata. Nesses momentos, a pessoa Scrum Master precisa intervir e abordar a situação, seja ao se impor diretamente ou ao chamar o membro da equipe para uma conversa.

Por estar em constante contato com as pessoas, a pessoa Scrum Master precisa possuir habilidades de comunicação e facilitação de eventos e reuniões. Essas habilidades são essenciais para garantir uma comunicação efetiva dentro da equipe e facilitar a realização de eventos e reuniões relacionados ao Scrum.

***** Scrum Master e Gerente de projetos
Em uma linguagem mais voltada para o ambiente de negócios, pode-se dizer que o Scrum Master desempenha um papel semelhante ao de um gerente de projetos. Isso porque a pessoa Scrum Master deve orientar e gerenciar a equipe para atingir os objetivos do projeto.

Além das competências mencionadas anteriormente, é fundamental que aqueles que desejam gerenciar outras pessoas conheçam a empresa em que o projeto está ocorrendo e seus colegas. Isso ocorre porque esses indivíduos precisarão constantemente elevar a equipe, promovendo uma comunicação mais aberta e reduzindo as barreiras, com o objetivo comum de entregar uma solução específica em um determinado projeto.

Conforme mencionado anteriormente, o conceito de equipe no Scrum é fundamental. Portanto, o papel do Scrum Master é crucial para garantir a integração contínua das pessoas, promovendo um trabalho mais unido.

***** Responsabilidade da pessoa Scrum Master
e forma geral, podemos dizer que a principal responsabilidade de uma pessoa Scrum Master são:

- Garantir os valores, práticas e regras do Scrum
- Remover barreiras
- Dar feedbacks
- Garantir a produtividade do time (eficácia no Scrum Guide)
- Organizar e facilitar eventos Scrum

O Scrum Master tem a responsabilidade de assegurar que a equipe esteja alinhada com os valores e princípios do Scrum, bem como seguir as práticas e regras estabelecidas pelo framework. Também atua como um pessoa facilitadora, identificando e removendo quaisquer obstáculos ou impedimentos que possam atrapalhar o progresso da equipe, seja em relação a recursos, comunicação ou qualquer outro aspecto.

Além disso, desempenha um papel crucial no fornecimento de feedbacks, tanto positivos quanto negativos. Isso ajuda a equipe a melhorar seu desempenho, reconhecendo o bom trabalho realizado e fornecendo orientação construtiva quando necessário.

Também trabalha para garantir a eficácia do time, seguindo as diretrizes estabelecidas pelo Scrum Guide. Isso envolve auxiliar a equipe a cumprir os objetivos do projeto dentro dos prazos estabelecidos, mantendo um fluxo de trabalho consistente e focado.

Por fim, a pessoa Scrum Master é responsável por organizar e facilitar os eventos do Scrum, como reuniões diárias, planejamentos, revisões e retrospectivas. Esses eventos são essenciais para manter a transparência, a colaboração e o progresso do projeto.

Outro ponto importante para deixarmos claro é que a pessoa Scrum Master apenas orienta e facilita o processo Scrum, não tomando as decisões.Como visto na aula passada, isso é responsabilidade do Product Owner.

O envolvimento de uma pessoa Scrum Master com a equipe ocorre tanto durante os eventos, como sprint planning ou review, quanto no dia a dia do time. Ela realiza uma leitura constante para identificar quando é necessário intervir ou quando sua ajuda é solicitada para fornecer orientação.

Agora que já entendemos sobre o Scrum Master, vamos compreender as atribuições de um time de pessoas desenvolvedoras.
**** Development Team
***** O Papel das Pessoas Desenvolvedoras no Time Scrum
Habilidades: "Proatividade", "Colaboração" e "Autogerenciamento".
Quando cada membro do time possui clareza sobre sua contribuição no projeto, as entregas se tornam mais eficientes e ágeis. Além disso, é essencial que as pessoas desenvolvedoras sejam proativas e capazes de se autogerenciar, compreendendo como e quando executar cada tarefa, sem depender exclusivamente das lideranças do time Scrum.

Um perfil colaborativo é altamente desejável para uma pessoa desenvolvedora, pois as interações e conversas constantes são essenciais durante o desenvolvimento do projeto. Nas aulas anteriores, mencionamos a importância da Daily Scrum, que consiste em reuniões diárias para acompanhar o progresso do projeto.

Resumidamente, o time de pessoas desenvolvedoras tem a responsabilidade de criar o produto com base nas orientações do Product Owner. Ou seja, o Product Owner prioriza determinadas tarefas que serão repassadas ao time para desenvolvimento. A cada sprint, o time entrega um incremento de produto, que consiste em uma parte da solução desenvolvida para obter feedback.

***** Scrum Team e Development Team
Há algumas diferenças entre o time Scrum e o time de pessoas desenvolvedoras.

A diferença central reside no fato de que o time Scrum engloba todas as pessoas envolvidas em um determinado projeto, como o Product Owner, Scrum Master e outros stakeholders. Por outro lado, o time de desenvolvimento refere-se especificamente às pessoas responsáveis por criar a solução em si. No caso de um projeto de software, seriam as pessoas desenvolvedoras, engenheiras e outros profissionais envolvidos nessa tarefa.

Normalmente, um time de pessoas desenvolvedoras é composto por cerca de 10 membros, embora isso possa variar. No entanto, é essencial que a equipe não seja muito grande, para facilitar a comunicação e a colaboração entre os seus membros. Manter um tamanho adequado permite que o trabalho flua de maneira mais eficiente e coesa dentro do time.

***** Responsabilidades do time de pessoas desenvolvedoras
- Elaborar um plano para a Sprint (Sprint Backlog)
- Determinar tecnicamente um incremento
- Coordenar e executar seu próprio trabalho
- Garantir a melhoria contínua do produto
- Informar impedimentos

As responsabilidades desse time são elaborar um plano para as sprints, determinar tecnicamente um incremento de produto, isto é, definir o que deve ser entregue em cada sprint como parte do produto em desenvolvimento. Além disso, precisa coordenar e executar o próprio trabalho, o que está relacionado ao autogerenciamento.

São responsáveis também por garantir a melhoria contínua do produto. Isso significa que devem buscar constantemente maneiras de aprimorar a solução, identificar oportunidades de otimização e implementar melhorias de forma iterativa a cada sprint.

Além disso, o time de pessoas desenvolvedoras também tem a responsabilidade de informar impedimentos. Eles devem ser proativos ao identificar e comunicar quaisquer obstáculos ou dificuldades que possam estar impactando o progresso do projeto, para que essas questões possam ser resolvidas de forma ágil e eficaz.

Um exemplo disso ocorre quando um membro do time não consegue entregar as demandas dentro do prazo estabelecido, o que pode resultar em atrasos no projeto. Nesse caso, é essencial que haja transparência, e a pessoa deve comunicar aos colegas de equipe e, principalmente, ao Scrum Master, que é responsável por garantir a aplicação do Scrum.

Essa comunicação permite que o time tome conhecimento dos impedimentos e possa encontrar soluções em conjunto, promovendo a colaboração e o apoio mútuo. Além disso, a responsabilidade de informar os impedimentos recai também sobre o Scrum Master, que pode auxiliar na remoção de barreiras e na busca por alternativas para manter o projeto dentro dos prazos estabelecidos.

Dessa forma, a melhoria contínua do produto e o cumprimento dos objetivos do projeto são assegurados através da identificação e solução proativa de possíveis impedimentos.

O principal propósito de um time de pessoas desenvolvedoras é solucionar problemas de usuários ou clientes. Portanto, é de responsabilidade do time obter feedback sobre o incremento do produto a cada sprint por parte dos usuários.

Esse feedback é essencial para compreender se as necessidades estão sendo atendidas de forma satisfatória e identificar possíveis melhorias ou ajustes a serem realizados. Em outras palavras, agregar mais valor à solução em desenvolvimento. Também auxilia o time na análise do processo de trabalho, entendendo o que pode ser melhorado nas etapas do Scrum.

Frase retirada do livro "Scrum: Gestão Ágil para Projetos de Sucesso"
Os desenvolvedores mais efetivos são aqueles que se envolvem e se engajam integralmente. Desde o entendimento dos problemas a serem resolvidos até a definição, a implementação e a validação de soluções, trabalhando lado a lado com Product Owner, clientes, usuários e demais partes interessadas durante todo o processo.
Rafael Sabbagh

Encerramos mais uma aula, na qual exploramos os diversos papéis do Scrum. Agora, é hora de aprofundarmos nosso conhecimento nos elementos do Scrum e como cada um desses elementos se relaciona com os papéis que já foram apresentados.
***** Exemplo de devs que poderiam ser elencados para um time
Desenvolvedores: as pessoas desenvolvedoras são responsáveis por desenvolver o produto de acordo com as prioridades definidas pelo Product Owner e as práticas do Scrum. João atribuiu os seguintes colaboradores como desenvolvedores da equipe Scrum:

Carlos: um desenvolvedor experiente com conhecimentos em várias linguagens de programação e habilidades de resolução de problemas.

Laura: uma desenvolvedora júnior que recentemente se juntou à empresa, mas demonstrou grande potencial em projetos anteriores e mostrou entusiasmo em aprender mais sobre o Scrum.

Rafael: um desenvolvedor sênior com experiência em desenvolvimento ágil e habilidades de liderança que podem ajudar a orientar os membros mais juniores da equipe.

Gabriela: uma testadora de qualidade experiente com conhecimentos abrangentes em testes de software e automação de testes. Ela será responsável por garantir a qualidade do produto por meio de testes rigorosos.

(AP: Da última citada fica a nota que a pessoa do QA também entra na categoria de desenvolvedor).
*** Elementos centrais do Scrum
**** Product Backlog
Saber montar um Product Backlog é fundamental para o sucesso de um projeto de desenvolvimento de software. O Product Backlog é a lista de itens que representam as necessidades, as funcionalidades e as melhorias planejadas para um produto. Construí-lo corretamente permite priorizar adequadamente às demandas das pessoas usuárias e do mercado, planejar o trabalho da equipe de desenvolvimento e garantir a entrega de um produto de alta qualidade.

Ah! Além disso, saiba que o Product Backlog é uma ferramenta valiosa para a comunicação e a colaboração entre as equipes de negócios, usuários e time de desenvolvimento, permitindo um alinhamento eficaz de expectativas e objetivos.
**** Spring Planning
O propósito desse evento é definir:

O que será entregue: o objetivo da Sprint;
Como será entregue: plano de trabalho para atingir o objetivo.
Tudo isso é definido pelo Product Owner em conjunto com o restante da equipe Scrum.

Basicamente, uma Sprint Planning é divida em dois momentos diferentes. O primeiro momento serve para a equipe discutir e definir qual vai ser o objetivo da Sprint que vai ser iniciada. Ou seja, o que deve ser entregue e quais são as principais atividades que devem acontecer para que a entrega seja possível.

O segundo momento do evento, o time Scrum e o PO analisam o objetivo definido do passo anterior e constroem um plano para detalhar tudo que deve ser feito para atingir o objetivo.

Em outras palavras, é necessário desdobrar as atividades em pequenas tarefas e indicar quem são as pessoas responsáveis por cumpriá-las, além de estabelecer um prazo para seu cumprimento. Esse é o plano de ação da Sprint Planning.

O Scrum Guide nos orienta que quando uma Sprint tem uma duração de um mês, o evento deve ter até oito horas de duração.

Uma Sprint Planning é finalizada com o documento chamado plano de ação. Esse plano precisa pegar tudo o que foi definido até então e detalhar tarefas, responsabilidades e prazos de entrega.

Por exemplo, "a tarefa 1 deve ser desenvolvido por integrante X. Essa pessoa tem prazo X para fazer essa entrega. Nessa entrega, a pessoa deve considerar A, B e C".

Ao final da Sprint Planning, todo o time de Scrum deve estar comprometido com o objetivo da Sprint e também com o plano de ação. O comprometimento é um dos valores do Scrum.

Além disso, ao final da reunião, cada integrante do time deve estar ciente do que é esperado dele, ou seja, qual trabalho que deve executar e a forma de fazê-lo.
**** Sprint
A sprint é um período de tempo fixo, geralmente de 1 a 4 semanas, durante o qual a equipe de projeto desenvolve o produto.

No período, normalmente com duração de 1 a 4 semanas, a equipe de projeto se concentra em desenvolver um incremento de produto funcional. Durante a sprint, a equipe trabalha nas tarefas do backlog da sprint, que são as tarefas selecionadas pelo time para serem concluídas durante a sprint.


Incremento do produto
As Sprints permitem que o time de desenvolvimento entreguem um trabalho de alta qualidade de forma iterativa e incremental.

O objetivo da Sprint é que o time entregue uma parte do produto potencialmente utilizável e que possa ser plenamente avaliada pelo Product Owner e demais partes interessadas.

A cada final de Sprint, tanto o Product Owner quanto a clientela, vão poder dar um feedback que vai fazer com que a equipe de desenvolvimento melhore o produto. Isso permite que esse produto seja desenvolvido com uma participação ativa da pessoa usuária.

(...)
Essas pequenas partes que vão ser entregues a cada Sprint são consideradas um artefato Scrum chamado *incremento do produto*.

Ao longo do processo de projeto, o time Scrum se reúne diariamente no evento de *Daily Scrum*.

A Daily Scrum sempre ocorre durante as Sprints e tem uma duração de 15 minutos, onde a equipe se reúne para falar das tarefas que estão colocando em prática durante o seu trabalho.
**** Sprint Review e Sprint Retrospective
***** Sprint review
O primeiro evento que acontece após o final da sprint é a sprint review ou reunião de revisão da sprint. *Seu principal objetivo é apresentar o produto entregue na sprint em questão, o "incremento".*

A reunião costuma durar em torno de 4 horas, se consideramos uma sprint de um mês. No caso de sprints menores, talvez a duração também seja menor. Depende muito do contexto e tipo de projeto.

Na reunião de revisão da sprint, esperamos que o time Scrum apresente para os stakeholders (clientes, usuários, acionistas ou mesmo alguém do negócio) o incremento que é resultado da sprint em questão. Assim, os stakeholders poderão passar um feedback sobre o que foi entregue.

Na apresentação, podem ser demonstradas as funcionalidades de um produto, por exemplo, um produto digital, ou demais elementos, a depender do tipo de solução que está sendo desenvolvida.

Além do incremento, o time deve apresentar os objetivos estabelecidos para a sprint em questão e quais deles foram atendidos ou não. A partir disso, a audiência conseguirá passar um feedback sobre o incremento de produto, dar sugestões e alinhar as expectativas em relação aos próximos ciclos de trabalho, ou seja, as próximas sprints.
***** Sprint Retrospective
Após a sprint review, acontece outro evento chamado sprint retrospective. *Se trata de uma reunião com o objetivo de avaliar, de forma geral, o processo de trabalho do time Scrum.*

Nesta reunião, o time discute o que foi feito na sprint e começa a tentar identificar melhorias para o que foi ruim. O Scrum guide orienta que, quando trabalhamos com uma sprint de um mês, a duração dessa reunião deve ser até 3 horas.

Neste encontro, o time deve discutir e analisar o que foi feito na última sprint e entender como foi a dinâmica de trabalho: o que funcionou, o que não funcionou e o que pode ser melhorado.

Além do processo de desenvolvimento do produto, analisa-se também as dinâmicas internas do time, por exemplo, a comunicação. Outro ponto importante discutido nesse tipo de evento é a identificação de obstáculos durante o processo de trabalho e exemplificação de como eles foram contornados.

***** Sprint Review vs Sprint Retrospective
Para que fique mais fácil identificar as principais diferenças entre as sprint review e a sprint retrospective, vamos analisar por partes cada um desses eventos.

****** Objetivos
Em relação aos objetivos, na sprint review, busca-se fazer uma revisão do produto/incremento e ter um feedback do que foi entregue. Já na sprint retrospective, o objetivo é a avaliação do processo de trabalho.

Isso não quer dizer que, por exemplo, em uma sprint retrospective, não surgirá algum assunto relacionado ao produto ou ao próprio processo de desenvolvimento do produto, mas, o objetivo final dessa reunião é avaliar o processo de trabalho e não o produto.

****** Pessoas
Sobre as pessoas que participam desses dois eventos, na sprint review, temos todo o time Scrum e Stakeholders, ou seja, todas as pessoas interessadas no projeto em questão. Já na sprint retrospective, somente o time Scrum participa.

****** Resultado
Quanto ao resultado esperado no final de cada um desses eventos, na sprint review, esperamos apenas um feedback sobre o produto. Já na sprint retrospective, a ideia é desenvolver um pano de ação, algo bem mais detalhado e direcionado, que fará com que o time consiga, de fato, melhorar suas práticas de trabalho.

****** Momento
Por fim, embora ambos aconteçam ao final da sprint, a sprint review vem primeiro, seguida da conclusão do trabalho do produto. Já a sprint retrospective, sempre vai acontecer após a review.



**** Obs: artefatos
Artefatos = Product backlog, Sprint backlog, Incremento
*** Scrum na prática
** Curso de Equipes ágeis: organizando os papéis em uma equipe
https://cursos.alura.com.br/course/equipes-ageis-organizando-papeis-equipe
Duas das metodologias ágeis mais populares são o Scrum e o Kanban.
*** Falando sobre ágil
Você provavelmente já encontrou pessoas que afirmam: "Eu apenas trabalho aqui". Essas pessoas existem. Às vezes, elas camuflam suas motivações, seja por preferirem manter em segredo que estão ali somente pelo salário ou pelo status associado à empresa. Se a equipe não demonstra comprometimento, é difícil alcançar uma efetiva adoção do ágil.

*Quando falamos sobre ágil, perceba que não estamos falando de metodologias ou práticas ágeis, mas sim de uma entidade, o ágil, que é um conjunto um pouco abstrato*. Estamos nos referindo a todo o mindset ágil (mentalidade ágil), toda a forma de pensar com as práticas e com a melhoria contínua que ele deve trazer.

O comprometimento é necessário, porém, ele varia em níveis. Em uma equipe, encontramos pessoas com diferentes graus de compromisso, mas é fundamental ter um nível mínimo de comprometimento para que uma equipe opere eficientemente no modelo ágil.
*** Confira algumas características de duas das metodologias ágeis mais utilizadas corporativamente:
**** Scrum
Divide o trabalho em iterações chamadas Sprints, geralmente de 2 a 4 semanas.
Tem papéis definidos, como Scrum Master, Product Owner e equipe de desenvolvimento.
Possui reuniões específicas, como Daily Scrum, Sprint Planning, Sprint Review e Sprint Retrospectiva.
**** Kanban
Oferece um fluxo contínuo de trabalho, sem iterações fixas.
Não impõe papéis específicos, permitindo maior flexibilidade nas responsabilidades.
Foca na visualização do fluxo de trabalho por meio de um quadro Kanban, com colunas representando os estágios do processo.
Para implementar agilidade nas empresas, é crucial entender os princípios fundamentais de Scrum e Kanban, adaptando-os conforme as necessidades e contextos específicos da organização. Além dos guias mencionados, também é benéfico participar de treinamentos, workshops e contar com a orientação de profissionais experientes na área ágil.
:LOGBOOK:
CLOCK: [2024-02-13 ter 09:57]
:END:
*** Revisão e práticas de agilidade
O Scrum é, na verdade, um framework, enquanto o Kanban é um método, e o Extreme Programming é uma metodologia. É por isso que preferimos falar em práticas ágeis, embora, em termos técnicos, uma prática possa ser algo mais simples do que um framework. De qualquer forma, não há problema em chamar de metodologias ágeis, frameworks ágeis ou métodos ágeis. O importante é que sabemos a quê as pessoas estão se referindo.
**** Scrum
Scrum
Entre o Scrum e o Kanban, é provável que o Scrum seja mais conhecido. Trata-se de um framework, uma estrutura organizacional para o modelo de trabalho. O Scrum orienta principalmente sobre os papéis, responsabilidades das pessoas e o que devem fazer, deixando em segundo plano o modo como executam essas tarefas, intervindo apenas quando necessário. Sua abordagem é iterativa e incremental devido à sua ideia de sprint, permitindo vários incrementos no produto de forma iterativa. Além disso, o Scrum é prescritivo quanto ao modelo de trabalho, estabelecendo de forma definida os papéis, cerimônias e artefatos a serem utilizados
**** Kanban
O Kanban é um método baseado no fluxo contínuo que prioriza a entrega contínua de valor ao cliente. Uma das premissas do Kanban é o learning by doing (aprendizado pela prática). Sendo assim, não é necessário dominar completamente o método antes de começar a implementá-lo. O processo começa gradualmente, à medida que se trabalha, aprende, melhora e evolui, resultando em um sistema Kanban cada vez mais eficiente. Essa é a essência e o valor do Kanban que apreciamos.

O Kanban possui práticas que favorecem a visualização do trabalho e aprimoram a eficiência do processo. Algumas delas são:

- Visualizar: visualizar o fluxo de trabalho;
- Regrar: tornar as políticas do processo explícitas, definir as regras e o funcionamento do trabalho para que todos entendam como o  processo opera;
- Entregar: limitar o trabalho em progresso, evitando iniciar muitas tarefas ao mesmo tempo, para focar em completar as iniciadas. Isso ajuda a evitar sobrecarga e a manter o foco na conclusão;
- Medir: medir e gerenciar o fluxo de trabalho, monitorando como o trabalho avança no sistema, identificando gargalos e oportunidades para otimizar o fluxo;
- Comunicar: estabelecer cadências de comunicação, que podem funcionar como um ciclo, mas não necessariamente de entrega. É um ciclo de como você está acompanhando a entrega de serviços.

Usar o quadro Kanban é uma das práticas mais utilizadas em todas as formas, frameworks e métodos de agilidade. Além disso, temos dentro do Kanban a possibilidade de usá-lo com o Scrum.
--------------
Kanban:
- Oferece um fluxo contínuo de trabalho, sem iterações fixas.
- Não impõe papéis específicos, permitindo maior flexibilidade nas responsabilidades.
- Foca na visualização do fluxo de trabalho por meio de um quadro Kanban, com colunas representando os estágios do processo.
*** Alterações: Scrum Guide 2020
O tamanho da equipe também foi ajustado. Agora, a equipe pode ter no máximo 10 pessoas, incluindo o P.O e o Scrum Master. Logo, são 8 desenvolvedores e mais 2. Essa é uma diretriz interessante que começa a trazer informações importantes sobre a organização de equipes ágeis.
**** Papel do Product Owner
O que faz um Product Owner?

Desenvolve e comunica explicitamente o Product Goal;
Cria e comunica claramente os itens do Product Backlog;
Mantém a comunicação eficaz, de forma que a gestão de stakeholders e tomada de decisões sejam respeitadas.

**** Papel do Scrum Master
O papel do Scrum Master sofreu uma alteração no Scrum Guide. Anteriormente, ele era descrito como um Leader Servant (Líder Servidor), mas na realidade, em inglês, era referido como um Servant Leader (Líder Servo).

Houve uma mudança de Servant Leader para Leader Who Serves (Líder que Serve). Essa alteração enfatiza a importância do líder; o Scrum Master é considerado um líder. Em muitas empresas, o Product Owner era visto como um coordenador e o Scrum Master estava abaixo dessa posição.

Com essa alteração, o Scrum afirma que o Product Owner faz uma liderança, e o Scrum Master também. Ou seja, cada um faz a sua liderança dentro do seu papel. Então, Leader Who Serves foi uma das mudanças do Scrum Guide 2020.

Além disso, o Scrum Master passou de ser um gerente ou facilitador para ser um líder que apoia a equipe no seu desenvolvimento e na entrega de valor ao cliente. Ou seja, o Scrum Master tem um papel importante de liderança.

O que faz um Scrum Master?
- Garante a implementação do Scrum conforme definido no Scrum Guide
- Capacita a equipe Scrum a aprimorar suas práticas dentro do framework Scrum
- Atua como líder, treinador e facilitador, orientando a equipe em autogerenciamento.
- Garante a remoção de impedimentos que possam prejudicar o progresso da equipe Scrum
- Assegura a realização dos eventos Scrum
- Apoia o Product Owner


Scrum Guide: O Scrum Master deve facilitar a autogestão da equipe
Scrum Guide: O Scrum Master é responsável por remover os impedimentos que a equipe possa enfrentar.
Scrum Guide: O Scrum Master facilita as cerimônias do Scrum para garantir que sejam eficazes.
Scrum Guide: O Scrum Master auxilia na melhoria contínua da equipe.
Scrum Guide: O Scrum Master ajuda a equipe a resolver conflitos internos.
Scrum Guide: O Scrum Master ajuda a superar a resistência à mudança.
Scrum Guide: O Scrum Master não é o gerente de projeto; seu papel é de liderança de equipe.

**** Papeis dos desenvolvedores
Mudança Cultural
Desafio: A transição de uma cultura organizacional tradicional para uma cultura ágil pode ser difícil.

Adaptação a mudança
Desafio: Aceitar e abraçar mudanças frequentes nos requisitos e nas prioridades.


Foco no valor do cliente
Desafio: Manter um foco constante no valor entregue ao cliente.

Trabalho em equipe
Desafio: Desenvolver uma mentalidade colaborativa, trabalhando efetivamente com outros membros da equipe.

Responsabilidade Coletiva
Desafio: Assumir responsabilidade coletiva pelos resultados da equipe, independentemente das tarefas específicas.

Feedback construtivo
Desafio: Aceitar e fornecer feedback construtivo de forma aberta e contínua.
	Feedback é bom quando a pessoa sabe dar e receber feedback construtivo.

Ritmo Acelerado
Desafio: Trabalhar em sprints curtos e manter um ritmo acelerado de entrega.

Flexibilidade na abordagem
Desafio: Adotar uma abordagem mais flexível e iterativa em vez de seguir um plano rígido.

Envolvimento do cliente
Desafio: Garantir o envolvimento contínuo do cliente ao longo do processo de desenvolvimento.


É responsável por transformar os itens do backlog do produto em incrementos potencialmente entregáveis;
*É autogerenciada, o que significa que ela tem a responsabilidade e a autonomia para organizar e gerenciar seu próprio trabalho;*
Participa ativamente das cerimônias do Scrum, como a reunião de planejamento da sprint, a revisão da sprint e a retrospectiva da sprint;
A equipe de desenvolvimento está pronta para se adaptar a mudanças nos requisitos do produto.
*** Papéis além do Scrum
**** Existem papéis no Kanban? A resposta para essa pergunta pode ser tanto sim quanto não.
Agora, vamos discutir propriamente sobre os papéis no Kanban. O Kanban indica que inicialmente ninguém recebe novos papéis. No entanto, existem dois papéis que surgiram durante a prática dessa metodologia: o SRM (Service Request Manager) e o SDM (Service Delivery Manager).

***** SRM (Service Request Manager)
O SRM, ou Gerente de Requisições de Serviço, é responsável por receber as requisições e compreender as necessidades e expectativas do cliente — papel similar ao de Product Owner no Scrum.

O SRM facilita a seleção e solicitação de itens de trabalho na Reunião de Reabastecimento, uma reunião semelhante à Planning no Scrum (sem sprint, sem a necessidade de um tempo fixo, mas com entregas contínuas repensadas com certa frequência).

O título SRM faz referência aos serviços, diferente do Scrum, em que o título de Product Manager ou Owner faz referência ao produto. Para entender essa diferença, é necessário estudar mais a fundo o método Kanban, estruturado inteiramente sob uma visão de serviço (que não antagoniza com a visão de produto do Scrum, afinal, o Scrum Guide mesmo afirma que um produto pode ser um serviço).

Não nos aprofundaremos nessas questões neste curso. Podemos entender os conceitos de serviço e produto como sendo correlatos entre as duas metodologias ágeis.

Por fim, o Kanban Essencial Condensado afirma que podemos entender o SRM como sendo o Product Manager, Product Owner ou Service Manager. Ou seja, se você tiver um Product Owner definido no seu método de trabalho atual e incorporar o Kanban, não é necessário criar um novo papel, mas apenas estabelecer que quem desempenha as funções de SRM é o Product Owner.

***** SDM (Service Delivery Manager)
O segundo papel é o SDM, ou Gerente de Entrega de Serviço, desempenhado pela pessoa responsável pelo fluxo de trabalho na entrega de itens para o cliente — semelhante ao Scrum Master.

Para isso, essa pessoa rege as etapas do trabalho, ajudando o time a trabalhar no dia a dia, removendo impedimentos e facilitando a Kanban Meeting (a "Daily" do Kanban) e elaborando o Delivery Planning, que é o plano de entregas de valor para o cliente. Ele é também conhecido como Gestor de Fluxo ou Gerente de Entrega.

***** Considerações finais
Esses papéis não são cópias dos papéis Scrum, pois têm suas próprias razões de ser. Eles são necessários porque o Kanban, que é uma prática estritamente Lean, precisa ter um fluxo contínuo de valor. Portanto, é necessário ter um Service Delivery Manager para organizar o desenvolvimento e manter as entregas de itens ao longo do tempo.

Da mesma forma, é necessário ter um papel similar ao de Product Owner em qualquer framework, metodologia ou prática de agilidade para receber e organizar as requisições da equipe. Isso não é uma cópia, mas uma necessidade.
**** ScrumBan altera os papéis
O ScrumBan realmente existe? O ScrumBan é bom?

Diríamos que sim, o ScrumBan existe. Atualmente, tanto o Scrum quanto o Kanban mencionam essa união do ScrumBan. Enquanto na internet e nas redes sociais temos discussões de Scrum versus Kanban, o framework e o método estão cada vez mais unidos, até com conteúdos sobre o assunto nas plataformas oficiais de cada um deles.

A ideia do ScrumBan é interessante e o instrutor afirma ser grande fã dela. Após estudar o Kanban de forma mais aprofundada e entender um pouco mais sua filosofia, o Kanban pode ser preferível. Porém, em alguns momentos, o Scrum é melhor — como quando, por exemplo, é necessário organizar a equipe de uma maneira mais rígida.

Mas, após usar o Scrum, você pode aplicar o Kanban por cima, e então terá o ScrumBan.

***** O que é ScrumBan?
Considere que você começou a usar Scrum, identificou todos os papéis, cerimônias e este método está estabelecido no trabalho da sua equipe. Então, aplicamos as práticas e os princípios do Kanban por cima, e isso se torna um ScrumBan.

E, sim, essa sobreposição altera um pouco os papéis das equipes. Vamos falar especificamente sobre isso.

***** Scrum Master
O Scrum Master desempenha um papel fundamental na remoção de impedimentos, o que já sabemos, mas também deve se concentrar na melhoria contínua do processo no contexto do ScrumBan.

Aqui há algo que no Scrum está um pouco mais escondido: a adaptação, melhorar o método. O Scrum foca um pouco menos nisso do que o Kanban, embora esse fator esteja entre seus pilares.

Quando aplicamos o ScrumBan, o Scrum Master passa a ter um foco na melhoria contínua do processo em si, incorporando princípios do Kanban, como, por exemplo, a limitação do Work in Progress (WIP).

Isso significa, basicamente: pare de começar e comece a terminar. Não comece muitas coisas de uma vez, comece e termine tarefas, pois assim a produtividade será melhor.

Ele também terá que dar ênfase na eficiência, pois o Kanban trata muito de produtividade, algo que o Scrum não aborda tão fortemente.

Então, o Scrum Master terá que se concentrar na eficiência do fluxo de trabalho e na identificação de oportunidades para otimizar o processo. Ou seja, essa pessoa precisa observar redução de gargalos, de desperdício, melhoria de entrega, fluidez no trabalho e assim por diante.

***** Product Owner
Mencionamos que o Service Request Manager tem um papel muito semelhante ao do Product Owner, e sabemos que o Product Owner é responsável pela priorização do backlog. Mas, no ScrumBan, essa priorização ocorre de forma mais contínua e não restrita ao início de cada sprint.

Afinal, no Kanban não temos a visão da sprint como algo tão fixo, importante ou relevante. Mesmo que tenhamos o ciclo de tempo, a entrega será mais contínua. É como se em todos os dias da sprint ele tivesse que refinar o backlog e fazer algo para melhorá-lo.

O PO no ScrumBan também aplica o ajuste dinâmico, ou seja, deve estar aberto aos ajustes nas prioridades à medida que as novas demandas surgem ou mudanças no contexto do projeto ocorrem.

Afinal, o ScrumBan prega a entrega contínua de valor. Então, não se aplica a ideia de encapsular a equipe dentro da sprint e não mudar mais nada. Aqui temos uma certa adaptação, talvez o ponto mais difícil de ajustar o ScrumBan, porque o ScrumBan prega o oposto do Scrum nesse sentido.

Essa é, possivelmente, a única rusga que ainda existe entre Scrum e ScrumBan, que ainda precisa ser determinado se no ScrumBan realmente podemos eliminar a ideia da sprint. Diríamos que sim, do ponto de vista de quem está aplicando. Mas se quisermos continuar dizendo que estamos seguindo o Scrum, não podemos tirar a sprint. São pequenas questões a resolver nessa sobreposição entre Scrum e Kanban.

***** Time de desenvolvimento
E para a equipe de desenvolvimento, faz diferença usar o ScrumBan? Sim, devido ao fluxo contínuo novamente!

Ao contrário do Scrum, onde o desenvolvimento ocorre em sprints, no ScrumBan o trabalho pode fluir de forma mais contínua e flexível. Novamente, essa é uma visão — precisamos ter cuidado, porque o ScrumBan acaba mudando um pouco o Scrum e o Kanban simultaneamente. Aqui estamos falando de uma visão de entrega mais contínua de valor.

A entrega contínua de valor pode ser preferível numa visão pessoal, mas em alguns momentos, dependendo da complexidade do produto, é melhor ter o time box da sprint.

No ScrumBan, temos foco em WIP. Portanto, as pessoas desenvolvedoras devem ter cuidado para não começar muitas coisas, concentrando-se em entregar o mais rápido possível cada uma das partes do produto. Ou seja, os membros da equipe precisam se acostumar a gerenciar seu trabalho em progresso, respeitando limites de work in progress, um princípio central do Kanban.

***** Limites de WIP
Mas, o que é limite de work in progress? Implementar limites, literalmente. No ScrumBan, a equipe pode adotar explicitamente limites do tipo: "na fase de análise, só podemos ter três trabalhos em aberto, não podemos abrir um quarto trabalho". Limites de WIP são aplicados a cada fase do processo, o que ajuda a evitar gargalos e manter um fluxo de trabalho mais suave.

O ScrumBan enfatiza também a visibilidade melhorada do trabalho em andamento, com limites de work in progress claramente definidos, permitindo uma gestão mais eficaz do fluxo de trabalho.

Temos o costume de usar quadros Kanban no Scrum — no Trello ou no Jira, por exemplo, ou em qualquer outra ferramenta. No entanto, o Kanban coloca essa gestão visual como algo fundamental. E, no ScrumBan, devemos trazer a ideia do Kanban. Se ainda não usa uma gestão visual bem forte e organizada, você precisará fazer isso ao adotar essa metodologia.


*** Papéis comuns na agilidade

Então, vamos passar por alguns papéis da agilidade comumente existentes em várias empresas, e talvez descrevamos algum papel que você conhece por outro nome.

**** Product Manager (PM)
Começamos com o Product Manager (Gerente de Produto). Há algum tempo, o termo Product Manager se tornou uma febre. Algumas empresas mudaram o nome de PO (Product Owner) para PM (Product Manager) para indicar que o papel é mais estratégico, mas em algumas empresas, a função é exatamente a mesma.

No entanto, a pessoa Product Manager é responsável pela visão de produto, estratégia e sucesso geral do produto. Ou seja, trata-se realmente de uma visão mais estratégica, de alto nível. Então, o PM tem uma visão diferente da do PO.

O PO lida com o dia-a-dia, trabalhando junto com a equipe para fornecer tudo que o produto precisa para ser desenvolvido e agregar valor ao cliente. O Product Manager olha para a estratégia do produto a longo prazo.

O PM trabalha em estreita colaboração com o Product Owner para garantir que as atividades de desenvolvimento estejam alinhadas com os objetivos de negócio e as necessidades dos clientes.

Agora, se em sua empresa só tem Product Manager, é provável que o Product Manager seja na verdade um PO. Nesse caso, é importante verificar se essa pessoa está realmente assumindo as responsabilidades de um PO. Se estiver, então pode assumir algumas tarefas mais estratégicas para se tornar Product Manager.

Não é errado ter somente um Product Manager, mas é preciso saber que se essa pessoa não estiver cumprindo minimamente as tarefas de um Product Owner, ela não pode ser Product Manager. Como se pode olhar para a estratégia se não consegue lidar com o dia a dia, com o operacional?

Portanto, podemos ter apenas um PM que cumpra também o papel do PO, ou ter outra pessoa que realize o papel estrito do PO. Não é uma boa ideia, por exemplo, ter um PM e colocar o Scrum Master, por exemplo, para desempenhar o papel do PO.

**** Stakeholders (partes interessadas)
Outro papel importante é o dos Stakeholders (partes interessadas), indivíduos ou grupos que têm interesse no produto ou projeto. Eles podem incluir clientes, usuários finais, patrocinadores e outros. As partes interessadas fornecem feedback, prioridades e requisitos ao Product Owner.

Adotamos essa nomenclatura da visão de Scrum, mas pode ser um Product Manager ou qualquer outro papel que desempenhe a função de receber demandas e entender as necessidades do cliente. Não estamos mais nos prendendo a um framework, e a ideia de stakeholder é bem clara desde a gestão de projetos.

**** Tech Lead
O Tech Lead, ou Liderança Técnica, é um membro da equipe de desenvolvimento com experiência técnica, que fornece orientação técnica para a equipe, que mostra o caminho, mas não necessariamente desempenha o papel de líder (AP/Pro: Esse último seria o Tech Leader) no dia a dia. Esse papel é especialmente forte e necessária em empresas com negócios mais complexos.

Essa pessoa ajuda a tomar decisões relacionadas à arquitetura, design e implementação técnica do produto. Esse produto pode ser software ou outro tipo de produto, como um produto de educação, por exemplo. É um papel sempre desafiador e difícil de desempenhar, independentemente da área!

**** Equipe de Operações (OPS)
Resumidamente, essa equipe é responsável por garantir que a infraestrutura de TI (no caso de uma equipe de tecnologia) e os sistemas estejam operacionais. Em uma abordagem ágil, a colaboração entre desenvolvimento e operações (DevOps) é incentivada para promover uma entrega contínua e confiável.

**** Agilista
Um papel que encontramos em algumas empresas é o Agilista, um defensor ou praticante da agilidade. É alguém que acredita nos valores e princípios ágeis, promove práticas ágeis e trabalha para criar uma cultura organizacional mais ágil. O Agilista precisa incorporar essa visão de agilidade e conhecer a fundo as metodologias ágeis.

**** Agile Coach (Coach Ágil)
Já o Agile Coach fornece orientações e treinamento para as equipes e a organização como um todo, para melhorar a agilidade. O Agile Coach ajuda na implementação de práticas ágeis, identifica áreas de melhoria e promove uma cultura ágil.

Diferente do Agilista, pessoa que está mais inserida nos projetos e trabalha com a equipe no dia a dia, desenvolvendo tarefas e realizando entregas, o Coach Ágil é alguém que treina as pessoas e traz conhecimento sobre agilidade, mas não está envolvido com os projetos.

Esse papel pode ser um pouco solto ou vazio, mas, em empresas grandes, a figura do Coach Ágil é necessária. O instrutor dá um conselho:

Se você é Coach Ágil, cuidado para não ficar muito à margem do projeto, pensando na agilidade apenas teoricamente. É necessário entender a prática também, estudando como a agilidade se aplica à equipe que você treina no dia a dia de trabalho. Se na empresa em que você trabalha há também Agilistas, trabalhe próximo deles. Se não, seja um pouco Agilista também! Isso com certeza dará bons resultados.

**** Líder de Release / Release Train Engineer (RTE)
Em contextos de ágil em escala, esse papel é bastante comum. Ágil em escala trata-se de trabalhar com várias equipes organizadas, orientadas, e há diferentes formas de fazer isso. Uma delas é realizando as release trains e, para isso, temos o Líder de Release, especialmente em frameworks como o SAFe (Scaled Agile Framework).

Esse profissional desempenha um papel fundamental coordenando várias equipes ágeis que trabalham em conjunto para entregar soluções integradas.

Digamos, por exemplo, que você está numa empresa que possui cinco times com dez pessoas, conforme o limite estabelecido pelo time Scrum. Ou seja, temos 50 pessoas. Dessas 50, temos 30 (três times) que trabalham em entregas muito interconectadas. Essas 30 pessoas podem ser um recorte, um release train.

Nesse caso, o Release Train Engineer é a pessoa responsável por fazer que essas entregas interconectadas caminhem organizadamente, garantindo que as necessidades de uma equipe sejam supridas pelas outras. Esse é um trabalho muito importante e difícil de fazer!

**** Equipe de Suporte ou Operações de Serviço (Service Operations)
Essa equipe é responsável por oferecer suporte contínuo aos produtos e serviços após as implementações. Em ambientes ágeis, a colaboração entre desenvolvimento e operações (DevOps) é importante para garantir uma entrega contínua e estável.

**** Scrum of Scrums Master
Em ambientes onde várias equipes Scrum precisam coordenar seu trabalho, o Scrum of Scrums Master (Mestre do Scrum de Scrums) facilita a comunicação e a colaboração entre as equipes, ajudando a identificar e resolver impedimentos que afetam várias equipes. Ou seja, é um Scrum Master de várias equipes!

**** Analista de negócios Ágil
Por fim, nas equipes de desenvolvimento, pode haver o Business Analyst (Analista de Negócios). Em um ambiente ágil, dentro do time Scrum, esse profissional colabora com o Product Owner na elaboração e refinamento dos requisitos do produto, além de ajudar a garantir que as histórias de usuário estejam bem definidas e alinhadas com os objetivos de negócio.
*** Papéis "adicionais", na prática
**** Agile Coach vs Agilista
***** Agile Coach
Agile Coach é fundamentalmente uma pessoa preparadora de pessoas e de equipes. Atua como um guia, ou seja, oferece treinamento, facilitação e suporte para promover a autossuficiência da equipe.

Esse seria um profissional especialista nas práticas ágeis utilizadas na empresa, sejam elas de Scrum, Kanban, de uma metodologia própria ou de um framework próprio. Essa abordagem é feita por meio de workshops, mentoria, aconselhamento, observação, feedback.
****** Definição
Um Agile Coach é definido por Jeff Sutherland, co-criador do Scrum, como "um mentor que ensina as equipes a implementar o Scrum, o qual proporciona um ambiente seguro para aprender, falhar e se tornar mais eficaz" ("Scrum: A Arte de Fazer o Dobro do Trabalho na Metade do Tempo").
****** Papel
O Agile Coach atua como um facilitador, mentor e treinador, auxiliando as equipes a entender e incorporar os princípios ágeis em suas práticas diárias.
****** Envolvimento
Segundo Mike Cohn, autor de "Agile Estimating and Planning", o Agile Coach pode trabalhar em diversos níveis, desde equipes individuais até níveis organizacionais mais amplos, proporcionando suporte contínuo durante a jornada ágil.
****** Foco
O Agile Coach concentra-se não apenas em processos, mas também em aspectos culturais e comportamentais, promovendo uma mentalidade ágil em toda a organização.
***** Agilista
Já quando há uma pessoa com um perfil semelhante a esse, mesmo que não conheça tão a fundo várias práticas ágeis, mas consegue atuar no dia a dia da equipe, você tem uma pessoa Agilista.

Essa pessoa se envolve mais diretamente no projeto, participa de reuniões, colabora com a equipe e fornece suporte prático durante as mudanças. Além disso, pode ter um papel ativo na equipe.

Por exemplo, em uma equipe de Scrum com 10 pessoas desenvolvedoras, pode haver um Agilista. Claro, se for Scrum puro, o Agilista é o próprio Scrum Master. Em ambientes complexos, se não houver uma metodologia própria, quem assume este papel de Agilista é o próprio Scrum Master.
****** Definição 
O termo "agilista" é mais amplo e pode se referir a qualquer pessoa envolvida com a agilidade, conforme define Jonathan Rasmusson em "The Agile Samurai: How Agile Masters Deliver Great Software".
****** Papel 
Um agilista é alguém que pratica ou apoia os valores e princípios ágeis, independentemente do papel específico. Pode ser um membro da equipe ou qualquer pessoa envolvida no processo ágil.
****** Envolvimento 
Pode estar envolvido em diferentes capacidades, desde o desenvolvimento de software até áreas como gerenciamento de projetos, marketing, recursos humanos, etc.
****** Foco
O foco principal do agilista está nas práticas e princípios ágeis, podendo desempenhar vários papéis em uma equipe ágil.
***** Diferenças
O Agile Coach é um papel mais especializado, centrado na orientação e coaching, enquanto o termo "agilista" é mais amplo e abrange qualquer pessoa comprometida com a agilidade.

Conforme destaca Jeff Sutherland, o Agile Coach geralmente atua como um profissional dedicado a orientar a organização na adoção ágil, enquanto um agilista pode ocupar vários papéis em uma equipe ágil.
***** Semelhanças
Ambos compartilham o compromisso com os valores e princípios ágeis.

Tanto Agile Coaches quanto agilistas estão envolvidos na promoção de práticas ágeis e na construção de uma cultura ágil em uma organização ou equipe.
** Curso de Extreme Programming: metodologia de desenvolvimento ágil de software
https://cursos.alura.com.br/course/xp-extreme-programming
XP é uma metodologia ágil.
*** O que XP resolve?
**** XP é uma das metodologias ágil
A ideia do XP, é fazer com que de forma ágil você consiga desenvolver software com qualidade, se comunicando bem e seguindo vários valores, princípios e práticas.

*Programação extrema, eXtreme Programming ou simplesmente XP, é considerado uma metodologia ágil pois se ajusta bem as pequenas e médias equipes em desenvolvimento de software com requisitos vagos e em constante mudança.*

[01:02] Mas vamos para uma definição prática, o que que é XP realmente, XP, como está escrito aqui, uma metodologia ágil e basicamente, a ideia de XP é te prover ferramentas necessárias, é te ensinar a usar ferramentas necessárias para que você consiga desenvolver software se adaptando a mudanças de forma muito tranquila e se você conhece metodologias ágeis sabe que esse é um dos pontos do manifesto ágil, que é se adaptar a mudanças mais do que seguir um plano.

[01:31] Então nós vamos falar bastante sobre planejamento também, mas toda a ideia por trás do XP é desenvolver software com muita qualidade se adaptando muito bem as mudanças, essa é a ideia do eXtreme Programming.

XP basicamente é uma metodologia que fornece, que te traz um conjunto de valores, princípios e práticas e vamos focar bastante na parte das práticas.

[02:22] Mas então como será que surgiu esse tal de XP, de onde que veio isso? Eu vou supersimplificar a história e vou deixar um para saber mais com um referência ou duas para você dar uma lida sobre a história do XP.

[02:34] Mas basicamente quatro feras, Kent Beck, Ron Jeffries, Ward Cunningham e Martin Fowler, eles participaram de um projeto que tinha alta complexidade, era algo bastante complexo de desenvolver e tinha muito risco, tinha muita coisa em jogo lá, dinheiro, muito dinheiro rolando, enfim, era um projeto arriscado, vamos dizer assim.

[02:56] E para garantir que tudo ia dar certo, que tudo ia correr bem eles seguiram, eles concordaram entre si em seguir uma série de práticas e sugestões que já tinham se provadas de sucesso anteriormente.

[03:10] Então um exemplo aqui e eu já vou te dar um spoiler de uma das práticas, teste antes mesmo do desenvolvimento, criar um teste antes de criar funcionalidade ou bug, já era sabido naquela época e já existiam especificações, já existiam documentos falando sobre isso, estudos sobre isso de que criar o teste antes mesmo da funcionalidade trazia vantagens.

[03:32] Então o que eles fizeram? Pegaram essa prática e aplicaram ao extremo, daí o nome eXtreme Programming, o que que eles faziam? Todas as funcionalidades e correções de bugs iam ter o teste criado antes.

[03:44] Então essa é uma só das práticas que nós vamos ver, mas eles pegaram várias práticas e aplicaram ao extremo, eles realmente seguiram aquilo a risca e no final desse projeto tudo deu certo realmente, ele foi entregue dentro do prazo, os clientes ficaram bastante satisfeitos e com isso surgiu o primeiro livro sobre XP.
**** Valores, princípios e práticas
[04:35] Então voltando para aquela ideia do conjunto do que é o XP, XP possuí cinco valores, alguns princípios e várias práticas.

[04:43] Vinícius, por que que o cinco tem o número ali e os princípios e práticas não? A metodologia como qualquer metodologia ágil sofre mudanças ao longo do tempo, então em algumas literaturas você vai ver 14 princípios e 17 práticas, em outras tiram uma prática, adiciona outra, mudam o princípio, então eu preferi não colocar um número aqui mas basicamente, em várias literaturas você vai encontrar 14 princípios, 17 práticas.
***** Valores
[05:09] Então vamos dar uma olhada aqui no que que eu quero dizer com isso, primeiro, os valores, eu não vou entrar em detalhes porque nós vamos ter um capítulo só sobre isso, mas basicamente os valores do XP são:
****** comunicação
Embora existam inúmeras formas de comunicar ideias, algumas são mais eficazes do que as outras.

[00:50] Então a ideia é que uma equipe extrema, uma equipe que esteja aplicando o XP preze o tempo inteiro pela comunicação da forma mais clara e eficaz possível para que o mínimo de atrito na comunicação aconteça, para que não role aquele famoso telefone sem fio, eu falo uma coisa, você entende outra e repassa isso como outra coisa, enfim, a comunicação tem que ser o mais clara p

[02:57] Mas o que tem que ficar muito fixado na nossa mente, o que tem que estar muito enraizado, é que comunicação é um dos principais valores do XP e nós temos que buscar o tempo todo inclusive, como é um dos princípios a melhoria, nós temos que buscar o tempo todo melhorar a comunicação, para que nós saibamos transmitir ideias e principalmente receber as ideias transmitidas por outras pessoas.

[03:20] Eu, falando como desenvolvedor preciso o tempo todo receber informação e interpretar aquilo da forma correta, então se comunicar não é só saber falar bem, por exemplo, mas também saber absorver informações.
****** simplicidade
[00:48] E a parte de simplicidade no XP como o décimo princípio do manifesto ágil já diz que simplicidade é a arte de maximizar a quantidade de trabalho não realizado e que isso é essencial, então a simplicidade nos evita, nos previne de implementar algo que não vai ser necessário.

[01:07] Então, de novo vão existir algumas práticas que o XP sugere para nós atingirmos a simplicidade, mas basicamente o conceito por trás desse valor é que nós devemos manter tudo tão simples quando aquilo pode ser.

[01:22] Como já dizia Leonardo da Vinci, a simplicidade é o mais alto nível de sofisticação.

[01:40] Então a simplicidade vai desde a comunicação de como nós transmitimos a informação até como nós escrevemos código, por exemplo, existe uma máxima no desenvolvimento de software e quem é desenvolvedor talvez já conheça essa, que explícito é melhor do que implícito, dessa forma nós tornamos mais simples a leitura de uma pessoa do código, por exemplo.

[02:27] Então simplicidade não é só na implementação, eu vou fazer essa funcionalidade simples, esse botão sem estilo ou algo assim, não, a simplicidade permeia tudo de uma equipe extrema, desde a comunicação até o produto em si, até a implementação, então a simplicidade ajuda na produtividade e nos ajuda a simplesmente não realizar trabalho que não era necessário.
****** feedback
 [00:15] E feedback não é algo exclusivo do XP, qualquer metodologia ágil precisa de feedback, inclusive o segundo princípio do manifesto ágil é mudanças nos requisitos são bem-vindas mesmo tardiamente no desenvolvimento.

[01:39] Quando a equipe de desenvolvimento realiza uma implementação através da ideia de ciclos de desenvolvimento e interativos e incrementais, nós recebemos um feedback para saber se aquilo que foi implementado é o que era esperado e inclusive, não só requisitos e a parte de negócio, mas o código em si pode trazer feedback para nós, através de testes automatizados nós sabemos se o nosso código pode estar funcionando ou não, isso é um feedback muito valioso.

[02:05] Através de técnicas de integração contínua que nós vamos falar, nós podemos saber se o nosso código está pronto ou não para ir para o ambiente de produção, para ser testado pelo cliente, por exemplo.

[02:15] Então feedback, assim como todos os valores, permeia todo o desenvolvimento de uma equipe extrema, todas as práticas dependem de feedback, todos os princípios visam o feedback e como melhorar a forma como nós damos feedback.'

[04:04] Então feedback nem sempre é negativo e inclusive feedback positivo deve ser reforçado, deve ser incentivado.
****** coragem
[00:31] Na sua opinião, você que está assistindo, uma pessoa que é uma desenvolvedora júnior deve refatorar o código escrito por uma pessoa que é desenvolvedora sênior?

[00:42] Você acha que isso faz sentido? E uma equipe extrema que que exerce as práticas do eXtreme Programming, existem diversas práticas que fornecem os meios para que sim, uma pessoa júnior consiga refatorar o código por uma pessoa sênior, qual o problema? Se existe espaço para melhoria, se existe motivo para refatoração, por que não?

[01:05] E as práticas que o XP fornece, te entrega segurança e as ferramentas necessárias para que nós tenhamos segurança, para que a única coisa necessária, para que tudo que nós precisemos, para que tudo que falte, para que essa pessoa júnior vá lá e implemente essa refatoração seja coragem.

[01:24] Então a coragem é esse ponto, é esse valor que nos motiva, que faz com que nós implementemos o que nós temos que implementar.

[01:31] E a coragem é ainda mais necessária em momentos de crise, o que que isso quer dizer? Recebemos um feedback negativo, nós precisamos ter coragem de assumir o erro, nós precisamos ter coragem de tentar de uma forma nova solucionar aquele problema.

[01:45] Então coragem quando nós falamos de eXtreme Programming, quando nós falamos de times que seguem as práticas do XP é a coragem e a atitude de implementar o que tem que ser implementado, de fazer o que tem que ser feito.
 
[01:58] E isso vem muito junto com a confiança, nós precisamos ter coragem de fazer algo e precisa existir confiança de que nós vamos fazer da melhor forma possível, de que nós vamos entregar da melhor forma que nós conseguimos.

[02:12] E isso só é possível se o time tiver uma boa comunicação, se tudo que for feito for feito de forma simples para que todos consigam entender e interagir em cima disso.

[02:23] E obviamente é muito importante para a equipe que haja feedback, porque dessa forma, com esses três valores, nós conseguimos ter a coragem para implementar uma tecnologia nova, para sugerir uma melhoria, para receber aquele feedback negativo que ninguém gosta mas nós temos a coragem de assumir a responsabilidade, para dar um feedback negativo que é uma tarefa desconfortável mas é necessária, infelizmente.

[02:49] Nós precisamos nos comunicar de forma simples mas dar esse feedback para que outras pessoas entendam o que pode ser melhorado ou que não está legal, então por isso coragem é um dos valores do XP.
****** respeito
[00:25] Uma pessoa que é respeitada ela tende a se sentir mais valorizada, se o seu gerente te trata com respeito ou com cordialidade, você se sente um desenvolvedor mais valorizado, você se sente respeitado naquele ambiente, você se sente motivado a fazer o que você tem que fazer, porque você é respeitado, você é alguém visto como uma pessoa, como um ser humano.

[01:41] Quando nós respeitamos uma outra pessoa, a comunicação se torna mais fácil, nós conseguimos nos dirigir a essa pessoa com cordialidade de forma que a comunicação seja fácil, seja simples.

[01:53] Quando nós respeitamos outra pessoa, nós simplificamos as coisas de forma a não tomar o tempo dela de forma desnecessária, de não subestimar ela e de manter tudo da forma mais simples possível evitando ruídos, evitando assuntos desnecessários, nós nos comunicamos de forma mais simples quando nós temos respeito.

[02:13] E o respeito é essencial para que bons feedbacks sejam entregues e para que nós recebamos feedbacks de forma correta.

[03:13] Então o respeito é fundamental para que um projeto ande de forma saudável e equipes extremas levam respeito ao extremo também, então esses são os cinco valores de um time é extremo, de uma da metodologia XP.
***** Princípios
****** Humanidade
[05:56] Mas, falando sobre os princípios que o XP preza, que são alguns, nós vamos prezar sempre pela humanidade, todas as pessoas em uma equipe de desenvolvimento XP, são humanas, são pessoas, elas têm os seus problemas e nós precisamos entender, nós não podemos exigir mais do que o possível.
****** Economia
[06:13] Nós prezamos pela economia, o que isso quer dizer? Utilizar da melhor forma possível os recursos disponíveis para entregar o maior valor possível, se nós só temos uma equipe de quatro pessoas desenvolvendo, essa equipe de quatro pessoas desenvolvendo vai ser econômica, vai entregar só o que é necessário, vai entregar o que gera mais valor para que todo mundo seja beneficiado.
****** Benefício mútuo
[06:34] E falando nessa parte de todo mundo ser beneficiado, outro princípio é o de benefício mútuo, todo mundo precisa ser beneficiado, o cliente precisa receber a solução para o problema dele, o desenvolvedor precisa utilizar as tecnologias necessárias, inclusive aprender receber a gratificação por isso, a bonificação, todo mundo precisa ser beneficiado num projeto.
****** Auto semelhança
[06:56] O princípio de auto semelhança basicamente diz que se algo já funcionou nós vamos implementar de forma semelhante, nós não vamos reinventar a roda, vamos dizer assim, mantendo simplicidade, então se algo funciona vamos com os devidas adaptações fazer de forma semelhante.

[07:10] E trazendo isso não só para o código mas para nós, se alguém realiza determinada prática que eu sei que funciona, eu vou trazer para mim e tentar aplicar isso e se eu sei que algo funciona para mim, eu mantenho fazendo isso de forma a sempre buscar a melhoria.
****** Melhoria
A busca pela melhoria é constante quando nós falamos de equipes extremas, de equipes que seguem o eXtreme Programming, o XP.

[07:35] Nós precisamos sempre melhorar, seja em quesitos técnicos ou em quesitos pessoais mesmo, como pessoa, para que nós estejamos de novo ligado com aquele primeiro princípio como humanos, como pessoas que nós estejamos em conexão com o nosso time.
****** Diversidade - Reflexão
[07:48] Esses dois pontos, diversidade e reflexão são bem conceituais, onde, através da diversidade nós conseguimos trazer pessoas com backgrounds diferentes, com conhecimentos diferentes para uma equipe e cada um vai poder agregar de uma forma diferente, isso é muito rico, isso é muito enriquecedor para a equipe.

[08:04] E reflexão, nós sempre precisamos botar a mão na consciência e analisar os resultados para entender o que deu certo, como nós podemos melhorar o que deu certo, o que não deu certo, porque não deu certo, então isso é um princípio do XP, nós sempre precisamos refletir sobre o que está acontecendo.
****** Fluxo
[08:21] Um dos princípios é seguir um fluxo, nós vamos falar sobre planejamento, mas através de um fluxo bem definido nós conseguimos entregar mais valor com menos recursos, atendendo aquela economia.
****** Oportunidade
[08:33] E toda a diversidade deve ser vista como uma oportunidade, seja de aprender, de melhorar o projeto, enfim, de corrigir um problema que nós não sabíamos que existia, então nós sempre devemos ver os problemas como oportunidades.
****** Redundância - Falha
[08:47] Redundância é o fato de nós estarmos pronto para algum tipo de problema que está diretamente ligado ao princípio de falha, nós precisamos estar preparado para caso alguma falha aconteça nós reagirmos a isso.

[08:59] Então quando nós falamos de redundância, pode ser na parte técnica, como por exemplo, ter backups ou na parte conceitual, nós nos adaptarmos, nos planejarmos de novo quando algo dá errado.

[09:10] Então esse é um princípio que se junta muito com o princípio de estar preparado para falhas, falhas vão acontecer, nós temos que estar pronto para isso de forma técnica, como eu falei, tendo backups, tendo código versionado, enfim, mas também como pessoas, nos temos que estar pronto para falhar, para errar receber um feedback disso e entender como melhorar.
****** Qualidade
[09:34] Qualidade é um ponto que vai estar em praticamente todas as práticas do XP, qualidade é um ponto crucial, é um dos principais princípios do XP, então nós sempre vamos prezar pela qualidade, não só da equipe de desenvolvimento como pessoas, como equipe em si, mas também da parte técnica, do código, da nossa infraestrutura, qualidade é essencial.
****** Passos pequenos
[09:54] E nós vamos seguir o princípio de dar passos pequenos para ir melhorando e adicionando novas funcionalidades que nós, inclusive, quando falamos de práticas específicas esses passos pequenos são levados a sério.
****** Aceitação
[10:07] E aceitação da responsabilidade é um dos também principais princípios porque numa equipe XP não existe o erro da fulana, do ciclano, existe o erro da equipe, então se alguma coisa deu errada a equipe vai assumir a responsabilidade e resolver aquele problema, sem ficar apontando o dedo.

***** Práticas
****** Cliente presente 
[00:25] Então antes de qualquer coisa, antes de nós pensarmos em desenvolver alguma coisa, é muito importante que nós tenhamos o cliente presente, existe uma frase muito interessante do vice-presidente da British Airways, na época o Donald Porter, ele falou uma vez que os clientes não esperam que você seja perfeito, ele espera apenas que você resolva as coisas que eles fizeram errado.

[00:48] Então basicamente o cliente tem uma expectativa sobre nós, ele quer a nossa ajuda, ele quer que nós desenvolvedores resolvamos um problema para ele, que nós corrijamos o que ele errou, no projeto dele, na empresa dele, ou até que nós automatizemos algum processo que ele faz de forma manual, essa é a intenção do cliente.

[01:11] Só que nós precisamos, para desenvolver isso, para resolver o problema dele, nós precisamos de uma contrapartida, o que que acontece? Nós precisamos saber o que desenvolver, como desenvolver, quando desenvolver, nós precisamos saber como priorizar e ninguém melhor para isso do que a própria pessoa que vai utilizar o sistema.
****** Time Coeso
[00:20] E falando sobre comunicação e proximidade entre membros de equipe, vamos falar sobre uma outra prática bastante simples de implementar no XP que é time coeso.

[00:31] Então vamos falar aqui do primeiro valor do manifesto ágil que é indivíduos e interações, foco na palavra interações, mais do que processos e ferramentas.

[00:41] Quando nós temos um time coeso nós queremos dizer ter um time junto, unido e que se complete e essas interações entre o time são essenciais para que nós mantenhamos uma base de conhecimento compartilhado, para que nós mantenhamos um ambiente saudável e que nós mantenhamos o projeto em si em um estado saudável.

[01:01] No projeto todas as pessoas fazem parte de um time e o time tem que ser visto como uma unidade, como nós comentamos lá nos princípios, não existe culpa de fulano ou culpa da ciclana, o que acontece é o time errou, o time é culpado e o time vai resolver esse problema, o time vai descobrir formas para melhorar, para não repetir esse erro, então o time é uma unidade e deve ser visto assim.

[01:27] E um grupo coeso ele vai ter todas as competências de negócio e técnicas para desenvolver um software, inclusive se você já ouviu falar sobre o termo Full Cycle Developer, isso esta muito ligado.

[01:40] Full Cycle Developer é um termo bem recente e inclusive tem um vídeo da Alura mais falando sobre Full Cycle vale a pena dar uma olhada, mas basicamente aqui nós temos uma diferençazinha que o grupo em si, tem todas as competências necessárias para obter os requisitos e fazer análise de requisitos, priorizar as tarefas que devem ser feitas, organizar as tarefas, dividir cada parte desses requisitos em tarefas em si, isso também é uma parte, desenvolver, testar, enviar para a produção, garantir que tudo está funcionando.

[02:20] Enfim, o time XP, o time extremo deve ser capaz de fazer isso tudo sem depender de times externos, sem depender de empresas externas, o time deve ter todas essas competências.

[02:33] Quando nós falamos de Full Cycle Developer, é como se uma única pessoa tivesse a capacidade de participar de todas as etapas do desenvolvimento, quando nós falamos de um grupo, de uma equipe extrema, de uma equipe que segue as práticas XP, não é necessário que uma única pessoa faça todo o trabalho.

[02:52] Mas uma pergunta muito importante que você deve se fazer quando estiver trabalhando com uma equipe é quantas pessoas precisam faltar para que o trabalho não possa ser entregue, para que o sistema não possa ir para o ar.

[03:03] Se esse número for pequeno você tem um grande problema, não pode existir uma dependência muito grande de uma única pessoa, o time deve ser coeso, o time deve ser uma unidade e não uma pessoa deve se sobressair e ter todas as responsabilidades.

[07:18] O XP não é uma bala de prata e nem pretende ser, ele não se propõe a ser, então como nós falamos naquele vídeo de XP e agilidade, nesse momento de melhoria contínua você pode, por exemplo, pegar emprestado a ideia do Kanban chamado de Kaisen que é implementar a melhoria contínua, você pode pegar emprestado a cerimônia chamada reunião de retrospectiva do Scrum, onde a equipe se reúne para discutir o que aconteceu.

[07:44] Então é muito válido utilizar ferramentas de outras metodologias, mas o foco é, o time é uma unidade, deve estar coeso e ter essas características, agora que nós já começamos a entender mais dessas práticas de gestão, vamos avançar, falando ainda em práticas que estão relacionadas a gestão e projeto.
****** Posse Coletiva
[00:00] Bem-vindos de volta e vamos falar agora de uma prática também muito importante do XP, ainda na parte de gestão que é de posse coletiva.

[00:10] E antes de falar da posse coletiva eu vou refazer uma pergunta que eu fiz, lá na parte da coragem, uma pessoa júnior deve refatorar o código escrito por uma pessoa sênior? E nós já trouxemos essa resposta, mas vamos discutir isso daqui.

[00:25] Quando nós temos a posse coletiva, e o que quer dizer essa posse coletiva? Todo mundo é dono, simples assim, então quando nós temos qualquer membro ou par do time, grave esse termo par, qualquer membro ou par do time pode implementar em uma funcionalidade pode corrigir um problema, pode melhorar, refatorar uma parte do código qualquer momento, desde que obviamente aquilo tenha sido planejado, esteja dentro do planejamento do time qualquer pessoa pode fazer.

[00:52] Então não existe um pedaço de código que é de fulano, aquele outro módulo é da ciclana, então não existe isso, o código é de todo mundo.

[01:03] Então no XP todo mundo têm a responsabilidade pelo sistema, isso traz a coragem do time para que todo mundo se sinta responsável pela qualidade e que para todo mundo se sinta motivado a realizar as tarefas, a corrigir os problemas e implementar melhorias.

[01:19] O termo original no eXtreme Programming é collective ownership, ou seja, é realmente posse coletiva, e não code ownership, não é só posse do código, porque todos os artefatos no desenvolvimento são de todo mundo, não só o código, a suíte de testes, as especificações e os testes de aceitação, os builds gerados pela nossa integração contínua, executável vamos chamar assim.

[01:47] Então todo mundo é responsável por tudo isso, poxa, o build quebrou, não, tem que chamar o fulano porque só fulano que pode corrigir essa parte, tem um teste falhando, tem que chamar a ciclana porque é ela que cuida dos testes, não, isso não existe, a posse é coletiva em todos os artefatos, em tudo que faz parte do desenvolvimento.

[02:10] E quando a posse não é coletiva, que só uma pessoa é dona do código e tem aquele cenário onde programador tem que mandar o código para aprovação, as vezes o Code Review não é uma prática que eu, Vinícius abomino, é você mandar um código para Code Review, isso não é ruim, só que, dois pontos, um, ter que passar um código por aprovação pode ser um sinal de desconfiança entre o time e nos cursos de entrega e integração contínua aqui da Alura, esse assunto é abordado com mais detalhes.

[02:42] Mas dois, o XP possui uma outra pratica para facilitar isso que nós vamos falar mais lá na frente quando nós estivermos falando de código mesmo.

[02:50] Mas basicamente, aqui nós temos, claro, um problema e mais uma vez eu faço aquela pergunta, quantas pessoas precisam faltar para que o sistema não possa ser desenvolvido.

[03:02] Se você tem um número pequeno de pessoas que precisa faltar para dar problema significa que a sua posse não é coletiva, aquela pessoa que faltou e que é muito importante é dona de uma grande parte do código ou do sistema e isso precisa mudar.

****** Ritmo sustentável
[03:18] Agora, falando ainda sobre essa parte de gestão e como garantir que as entregas sejam feitas com qualidade e de forma sustentável, vamos falar sobre o ritmo sustentável do desenvolvimento.

[03:30] *E aqui tem uma frase bem interessante que se eu não me engano é do Uncle Bob mas eu não achei essa referencia, que desenvolvimento de software é uma maratona, não uma corrida de 100 metros rasos.*

[03:40] O que que isso quer dizer? Nós, quando estamos desenvolvendo, da mesma forma como uma maratona a pessoa começa correndo em um ritmo constante, ela não começa correndo desesperado para se cansar logo e depois todo mundo passar ela, então existe um ritmo constante, quando nós falamos de desenvolvimento, ritmo sustentável traz para nós a produtividade a longo prazo.

[04:04] Então ao invés de você fazer várias horas extras logo na primeira semana para tentar entregar muita coisa, o ideal é que você mantenha um ritmo constante sustentável de trabalho para que a produtividade a longo prazo não seja prejudicada.

[04:19] Porque pensa comigo, se toda semana você trabalha 60 horas, logo logo você vai ter um burnout, você não vai estar mais motivado, você vai trabalhar já cansado, então isso não é interessante, isso não traz produtividade.

[04:33] E uma curiosidade, o conceito de ritmo sustentável começou lá nas práticas naquele projeto dos quatros pais fundadores do XP, com o termo quarenta horas semanais, o nome dessa prática era 40-hour week.

[04:49] E o Ron Jeffries renomeou essa ideia para ritmo sustentável, para que essas quarenta horas por semana sejam um pouco mais flexíveis, para que nós não fixemos nesse número, quer dizer que se eu trabalhar 36 horas não vai funcionar? Se eu trabalhar 38 horas por semana eu não estou aplicando a prática?

[05:06] Então a ideia é manter num ritmo sustentável de acordo com a produtividade da equipe e com quanto a equipe trabalha normalmente, mas tem que ser sustentável e esse é o ponto.
***** Link para mais detalhes
https://www.desenvolvimentoagil.com.br/xp/papeis/
**** Projeto
***** Metáfora de Sistema
[00:10] E a primeira prática que eu vou citar é a de metáfora, então a Esther Derby que é uma das autoras o livro Agile Retrospectives, é um nome difícil, ela disse essa frase aqui: 
	"98% do nosso pensamento está realmente acontecendo em um nível inconsciente, grande parte através de metáforas"
e agora eu vou trazer uma reflexão para você, para que você imagine o quanto isso aqui pode ser verdade.

[00:38] Você muito provavelmente está me assistindo em um computador, esse seu computador tem pastas, arquivos, uma área de trabalho, talvez você já tenha feito compras online através de um carrinho de compras.

[00:50] Talvez você já tenha participado de um debate ou num formato de Fishbowl, então tudo isso que eu acabei de falar são metáforas, são coisas que nós atribuímos a outra que dá outro significado ao nome para facilitar o entendimento.

[01:05] Você não tem realmente uma pasta dentro do seu comutador, existe uma organização e você também não tem um arquivo, uma folha, algo lá dentro, existe algo que o computador armazena, existem dados armazenados no HD ou em memória que nós chamamos de arquivos para facilitar o entendimento.

[01:23] E uma metáfora do sistema traz uma visão comum e auxilia na comunicação para que nós entendamos determinados elementos.

[01:32] E isso pode ser muito útil, durante, por exemplo, uma reunião onde nós estamos tentando entender o que o cliente quer ou nós estamos explicando para o cliente como algo vai ser implementado, então metáforas pode auxiliar bastante na comunicação entre equipe técnicas e não técnicas, por exemplo.

[01:49] E falando em equipes técnicas e não técnicas, existe um conceito muito famoso na área de desenvolvimento chamado Demain-Driven Design ou DDD.

[02:00] O DDD tentando resumir aqui, supersimplificar, é uma filosofia que tenta estreitar a comunicação entre equipes técnicas e não técnicas e traz uma linguagem comum que é chamado de linguagem onipresente, ou linguagem ubíqua, traz isso para o código.

[02:18] Então uma metáfora, se ela for entendida por todas as pessoas, se for conhecida tanto pela equipe técnica quanto não técnica, ela pode ser utilizada no código e dessa forma nós podemos tornar o código mais expressivo e mais fácil de nós explicarmos.

[02:34] Um cenário bem simples, imagina que eu tenho realmente um carrinho de compras no meu sistema, então eu vou utilizar a metáfora de carrinho de compra para me comunicar com a equipe de negócios e falar um cliente adiciona um produto no carrinho, quando o carrinho tiver cheio nós podemos fazer determinada coisa.

[02:52] Então eu trago isso para o código, eu vou ter, por exemplo, uma classe "carrinho" e vou ter um método "adicionar produto", com isso, quando eu estiver falando com a equipe que não é técnica, eu ainda assim consigo usar termos que estão no código e isso facilita bastante a comunicação.

***** Projeto Simples
[03:34] Agora, ainda sobre projeto, vamos falar sobre projetos simples e eu já falei essa frase aqui, é uma frase que eu gosto bastante, 
	"A simplicidade é o mais alto grau de sofisticação"
 uma frase do Leonardo da Vinci e quando nós falamos de projetos obviamente isso não é diferente.

[03:51] Nós temos que trazer a maior simplicidade possível na hora de projetar um sistema e tentar prever o futuro é anti-XP, se nós tentamos supercomplicar com aquela futurologia, tentando adivinhar o que vai ser necessário com a síndrome de Nostradamus, se nós tentamos prever o futuro nós muito provavelmente vamos implementar algo que não é necessário.

[04:15] Então nenhuma funcionalidade adicional é implementada pois isso desvia do caminho da solução e claro, só aumenta a complexidade do software porque se nós estamos implementando mais coisa, mais complexidade é adicionada.

[04:29] E um termo muito conhecido no meio de agilidade principalmente quando nós falamos de Lean é o MVP Minimum Viable Product, ou produto mínimo viável.

[04:41] O que que acontece? Um MVP, o mínimo produto viável é o produto com o menor número de funcionalidades, mas que seja viável, que seja possível, que seja algo que agregue valor, então o ter um projeto simples, nós conseguirmos projetar algo de forma simples é essencial para nós termos um MVP.

[05:00] E vou dar um exemplo muito simples de novo sobre um relatório, imagina que a equipe de negócios precisa muito de um relatório que é muito complexo e é interessante para eles personalizar, modificar vários campos.

[05:13] O que que nós podemos fazer? Existe a forma mais utilizada desse relatório, entrega o relatório, sem possibilidade de personalização em uma sprint, em um ciclo de desenvolvimento, esse é o mínimo produto viável, é o que aquela equipe precisa da forma mais simples possível para atingir o objetivo.

[05:30] Na próxima interação, na próxima sprint você adiciona filtros, na outra você coloca uma ordenação diferente.

[05:38] Então você pode ir de forma interativa e incremental como as metodologias ágeis pregam, ir incrementando e adicionando funcionalidades, mas o foco é na simplicidade.

*** Planejando o trabalho
**** História do Usuário
[00:34] Então vamos lá, a primeira prática sugerida é muito famosa e se você conhece metodologias ágeis muito provavelmente você já ouviu falar.

[00:42] Que são as User stories ou histórias de usuários e um grande autor de livros sobre histórias de usuário, sim, existem livros sobre isso, então obviamente não dá para eu falar sobre tudo de histórias de usuário aqui, mas um grande autor, o Jeff Patton diz que histórias não são requisitos, elas são discussões sobre resolver problemas para a nossa organização, nossos clientes e nossos usuários que levam a acordos sobre o que construir.

[01:08] Então é uma visão bem interessante, que as histórias não são requisitos em si, elas são uma conversa que levam a acordos sobre o que nós vamos construir.

[01:17] Então é uma forma talvez de documentar os requisitos e não são os requisitos em si, os requisitos são obtidos através de conversa, comunicação direta e as histórias são uma forma de nós chegarmos a um acordo do que vai construir a partir do requisito.

[01:34] Então, entrando um pouco mais a fundo, as histórias de usuários descrevem os requisitos de uma forma ágil, o que que isso quer dizer? É muito comum, outra forma muito comum de descrever requisitos é através de diagramas de casos de uso, ou use cases.

[03:00] Então continuando na ideia de user stories, para escrever, para gerar uma história de usuário, é bastante comum o uso do modelo 3C, o modelo 3C envolve cartão, conversação e confirmação.

***** Cartão 
porque as histórias devem ser escritas ou em cartões ou em algo do tamanho de um cartão, Vinícius, o que que é um cartão? É bastante conhecido o modelo de cartão de história de usuário que é como se fosse um post-it um pouco maior, um cartãozinho, onde nós vamos ter que fazer a nossa história caber ali, para que ela seja sucinta, para que ela seja simples, voltando para o valor da simplicidade.

***** Conversação 
porque um requisito é comunicado do cliente ao time através de conversação direta, então nós, como desenvolvedores, não inventamos uma história de usuário, o cliente vai comunicar o requisito e nós documentamos esse requisito através de histórias de usuário.

***** Confirmação
normalmente é feita através de critérios de aceite, que nós vamos falar bastante mas não nesse vídeo, nós vamos falar um pouco mais para frente.

***** Histórias de usuário (continuação...)
[04:01] Mas continuando, histórias de usuário podem ter ciclos de vida, inclusive ciclos de vida diferentes, mas elas vão sendo refinadas, vão sendo uma história muito grande pode ser quebrado em várias menores histórias de usuário.

[04:17] Então normalmente elas nascem como se fossem épicos, um épico é uma história de usuário muito abrangente, algo muito genérico, depois vira uma história de usuário, que pode ser quebrada em várias tarefas.

[04:28] Então para nós termos um modelo de escrita nós podemos escrever história de usuário de várias formas, até por isso existem vários livros, mas para nós trazermos um modelo eu vou utilizar um modelo mais comum que é modelo Connextra.

[04:42] Então nós precisamos ter na história de usuário quem vai ser beneficiado, qual vai ser o benefício e qual é a funcionalidade em si.

[04:50] Então, 
   - "Como um" (quem sou eu, que eu vou dizer quem vai ser beneficiado, então o meu papel na empresa, na organização, quem sou eu como usuário)
   - "Eu quero" (a funcionalidade em si)
   - "Para que" (e aqui nós descrevemos o benefício)

[05:04] Então um exemplo simples de uma história bem genérica, isso pode ser considerado um épico:

	"*Como um* repositor de estoques *eu quero* consultar os itens disponíveis *para que* eu possa verificar quais itens repor."

[05:16] Então aqui eu estou dizendo quem vai ser beneficiado com a implementação dessa história, o que vai ser, qual é a funcionalidade que eu preciso implementar e qual o propósito dessa funcionalidade.

[05:28] Para que isso? Para que eu tenha um pouco mais de contexto e para que os critérios de aceite, para que eu saiba como isso vai ser testado, como isso vai ser utilizado para garantir que o valor está realmente sendo entregue.

[05:40] Então aqui nós temos um crash course, nós demos uma passada rápida sobre o que são histórias de usuário, existem outros cursos naquela formação de gerente ágil que entra em mais detalhes sobre histórias de usuário, existem livros de histórias de usuário, mas o básico que nós precisamos entender é isso, um modelinho de história de usuário.

[06:00] Só que nós não vamos simplesmente ter uma lista enorme de histórias de usuário e ir implementando conforme dá, nós precisamos nos planejar, organizar o que vai ser feito quando, qual história de usuário vai ser pega agora para nós refinarmos, qual vai ser deixada para depois e quando nós falamos desses detalhes de planejamento, nós entramos num outro assunto que eu vou citar num próximo vídeo.
**** Jogo do Planejamento (AP: seria nossa planning, inclusive com Planning poker)
[00:00] Bem-vindos de volta e vamos falar sobre como planejar quais histórias de usuário nós vamos atacar, qual nós vamos implementar, uma frase muito interessante do Dwight é

	"Planos não são nada, planejamento é tudo"

[00:14] Isso está dentro daquele valor do manifesto ágil, reagir a mudanças mais do que seguir um plano, o que que isso quer dizer?

[00:22] Nós fazermos um plano completo de como algo vai ser seguido daqui para frente, isso não quer dizer muita coisa, mudanças acontecem, o plano vai precisar mudar, agora o planejamento de como nós vamos reagir a essas mudanças, como nós vamos trabalhar agora, isso quer dizer muita coisa.

[00:39] Então a ideia por trás, tanto de User stories quanto de todo esse jogo do planejamento é essa, nós sabermos, nós nos reunirmos e de alguma forma, através de regras bem definidas, por isso o nome jogo, nós decidirmos o que vai ser implementado nessa interação, quanto tempo isso vai levar para que nós implementemos.

[00:59] Então a ideia do jogo do planejamento é uma reunião, pode ser semanal, pode ser uma reunião a cada ciclo, isso a sua equipe vai definir as regras do jogo e através de determinadas regras nós vamos sentar e definir algumas coisas.

[01:15] Então, no jogo do planejamento o cliente pode, por exemplo, informar as histórias que ele quer que sejam implementadas e indicar as prioridades dessas histórias, olha, eu quero que essa história aqui seja implementado primeiro e essa história aqui pode ser deixada para depois, tudo bem e junto com a equipe através de regras bem definidas nós vamos definir o que que vai ser implementado.

[01:37] E as regras podem variar, existem diversas sugestões de regras de jogo do planejamento, mas a ideia por trás é que o nome é jogo porque nós vamos definir regras para que todo mundo jogue e que todo mundo faça parte da definição do que vai ser implementado e quanto tempo vai levar.

[01:56] Lembra lá daqueles motivos de motivos de falha de um projeto, onde nós temos um trabalho empurrado com prazo muito apertado, o jogo do planejamento é exatamente a prática que evita aquilo.

[02:10] A equipe de desenvolvimento faz parte das estimativas de uma história de usuário, a equipe de desenvolvimento, quem vai desenvolver vai dizer, olha só, essa história vai levar em média tanto de tempo,

[02:22] Então com isso nós evitamos aquele problema de exaustão de uma equipe tendo que desenvolver muito rápido porque algo não foi planejado e chegaram para nós estabelecendo prazo.

[02:33] Uma das técnicas mais famosas e uma das regras mais famosas para o jogo do planejamento é o Planning poker, então através, baseado nas histórias de usuário uma equipe vai atribuir pontos a essa história, esses pontos querem dizer o custo da história de usuário.

[02:49] E um custo da história de usuário é muito relativo, uma equipe pode entregar, por exemplo, trinta pontos por interação, por sprint a cada três semanas.

[03:00] Então nós vamos dando pontos para a história de usuário e baseado nisso, com a somatória que a equipe pode entregar, supondo que a equipe entregue trinta pontos por interação, nós sabemos que vai priorizar as histórias até que nós somemos um total de 30 pontos e não pode passar daquilo porque nós não vamos entregar, a equipe não tem recursos suficiente para isso, então existem várias formas de você jogar o Planning poker, vale a pena dar uma lida mais a fundo sobre isso.

[03:28] Uma das mais comuns é através de uma sequencia um pouco alterada da sequencia de Fibonacci, onde cada história de usuário vão ter storie points, esse pontos e os jogadores que são todos, baseado numa história de usuário eles vão dizer, eu acho que essa história de usuário aqui tem, por exemplo, vale três pontos, custa três pontos.

[03:51] E se dois desenvolvedores ou mais entregarem, disserem que essa história tem pontos muito diferentes, o que vai acontecer? Essas discrepâncias vão ser justificadas.

[04:04] Então por exemplo, imagina que eu e você estamos discutindo num Planning poker sobre uma história de usuário, eu digo que essa história de usuário custa dois pontos, é uma implementação relativamente simples, já você vai dizer que ela precisa de treze pontos, é mais complexa, vai levar tempo.

[04:20] E nós dois vamos explicar nossos pontos de vista, eu vou falar olha, eu acho que ela custa dois pontos por causa disso, é uma tarefa que só vai precisar disso e está pronto, você vai apresentar o seu ponto de vista falando não, mas você está esquecendo desse detalhe que vai ser necessário daquele outro sistema, sempre mantendo a simplicidade.

[04:38] E nós vamos tentar chegar num meio termo que faça sentido, então a partir disso, a partir desse jogo e da conversa entre toda a equipe, nós vamos chegar nos storie points em quanto cada história custa.

[04:52] E baseado no custo nós conseguimos planejar o que vai ser entregue naquela sprint e naquela interação, naquela semana, como a sua equipe preferir.

[05:02] Então com isso repara que nós já estamos resolvendo diversos daqueles pontos de falha, nós temos o cliente presente, nós não temos mais aquele problema de cereja do bolo, trabalho empurrado com Planning poker nós não vamos sofrer mais.
**** Garantindo a qualidade - Testes de aceitação - Pequenas Entregas
[00:15] E o XP prioriza sempre entregas muito pequenas, o sétimo princípio do manifesto ágil é
 	 "software funcionando é a medida primária de progresso"
o que que isso quer dizer? Se não tem um código rodando em produção que o cliente possa utilizar, não tem progresso, é zero, nós estamos na estaca zero, então nós precisamos, sempre que possível entregar algo funcionando, software funcionando.

[00:56] No eXtreme Programming, no XP, cada realese tem que ser o menor possível com o maior valor de negócio possível e por isso nós precisamos priorizar as histórias de usuário, então gerar um relatório muito importante precisa ser implementado antes e depois nós estilizamos o botãozinho que precisa ser estilizado, para isso nós vamos priorizar e nós temos que ter entregas pequenas.

[01:20] Porque nós vamos ter entregas pequenas? Bom, primeiro as pequenas entregas vão ter aquelas histórias que nós já definimos, nós já priorizamos no jogo do planejamento.

[01:28] E com pequenas entregas nós temos várias vantagens, nós entregamos valor de forma adiantada e de forma contínua, aquela ideia de metodologias ágeis, de ter um processo interativo e incremental, ou seja, nós vamos sempre adicionando de forma incremental.

[01:48] E o processo é aprimorado mais rápido, nós, caso erremos na primeira release por exemplo, ou em alguma release, nós erramos alguma coisa? Nós falhamos rápido, é o conceito do fail fast e consegue aprender com esse erro de forma mais rápido e além de rápido nós falhamos de forma pequena, por ser uma entrega pequena nós conseguimos corrigir esse pequeno erro.

[02:47] Existem técnicas que ajudam nessas pequenas entregas e nós vamos vendo, por exemplo, uma das mais importantes são os testes de aceitação.

[05:37] Então, como está aqui, cada história de usuário vai possuir um ou mais, normalmente mais de um, critérios de aceitação, criado também pelo cliente e isso é importante, o analista de teste, o tester, vai lá conversar com o cliente e ele vai ajudar a pensar em bons cenários de teste e esses cenários vão ser escritos junto com o cliente pensando em automatização.

[06:01] E como que nós podemos escrever? Como nós já vimos, para um modelo de escrita de histórias de usuário, vamos ver um modelo de escrita de testes de aceitação e um muito comum é a sintaxe chamado Gherkin que alguns conhecem como BDD.

[06:17] E eu já vou falar desse termo também, mas basicamente, nós temos um pré-requisito então 
   - dado que (algo está no estado necessário)
   - quando (uma ação for executada)
   - então (nós temos algum resultado esperado)
esse é o modelo de escrita.

[06:32] Então pensando naquela nossa história de usuário de reposição de estoque, 
"*dado que* o usuário logado é um repositor de estoque, *quando* o item de menu consulta prateleiras para reposição for clicado, *então* a lista de todas as prateleiras para reposição é exibida.
**** Spikes de Planejamento
[00:11] Eu não conheço nenhuma tradução para spike, mas basicamente um spike de planejamento é uma prova de conceito, é algo mínimo que nós vamos fazer ali para ver a complexidade da implementação real.

[00:22] Então tem uma frase muito interessante do Uncle Bob:
	"Algumas vezes a melhor maneira de resolver um problema é ir para casa, jantar, assistir TV, ir para a cama, acordar na manhã seguinte, tomar banho, o problema pode estar resolvido."

[00:35] Então a ideia do spike de planejamento é fazer alguns testes, praticar, mas sem tentar resolver o problema real da melhor forma possível pensando em qualidade é jogar um pedaço de código ali e ver se funciona, os spikes fazem parte de uma prática que ajuda o time no conhecimento, ou seja, adquirir o conhecimento e descobrir as dificuldades na hora de estimar as histórias de usuários de forma um pouco mais acertada.

[01:00] O que acontece? Existe o que é conhecido como risco de planejamento, é muito comum nós estarmos planejando e fazendo estimativa nós podemos errar, acontece, é comum, por isso, lá no Planning poker existe um espaço.

[01:15] Nós vemos os stories points vão aumentando o espaço entre um e outro conforme os storie points aumentam, então entre um e dois é só a diferença de um, entre 20 e 40 tem 20 pontos de diferença, porque quanto mais demorada a storie, maior o risco de nós errarmos na estimativa, então os spikes de planejamento podem nos ajudar a estimar de forma um pouco melhor.

[01:41] O objetivo é aumentar um pouco a confiança, ter um pouco mais de conhecimento justamente para a hora do jogo do planejamento, para o Planning poker.

[01:48] Então o spike é basicamente, como eu falei, uma prova de conceito, é um programinha muito simples para explorar algumas possíveis soluções, brincar um pouco e entender aquele problema um pouco melhor.

[02:01] A ideia é que nós façamos spike arquitetural, por exemplo, para descobrir algumas dificuldades técnicas, para conhecer tecnologias novas e quando uma dificuldade importante surgir, é interessante deixar um par de desenvolvedores ali tentando resolver por alguns dias até que eles entendam, pelo menos tenham uma boa base de como vão poder resolver aquele problema.

[02:22] E assim nós vamos ter um conhecimento maior para na hora do Planning poker, na hora do jogo do planejamento saber estimar a historia de usuário em questão.

[02:32] Por uma tarefa ser realizada, para isso acontecer, os spikes podem ser estimados, eles devem ser estimados, eles devem fazer parte do planejamento de uma sprint, de uma interação.

[02:44] Então, por exemplo, eu sei que nas próximas sprints vai ver uma tarefa muito complexa, uma história bastante difícil de implementar, seja por motivos técnicos, de uma tecnologia difícil que a equipe não conhece bem, ou até por motivos de negócio, é algo bastante complexo e que não consigo quebrar em pedaços menores.

[03:02] Então nesse momento nós vamos dizer, olha, nós vamos colocar aqui uma história, nós vamos adicionar um tempo, vai reservar um tempo para um spike, para uma prova de conceito para nós conseguirmos planejar isso melhor e garantir que tudo vai correr conforme o planejado.

[03:17] E o ideal, esse é o padrão, o correto, é que nós façamos esse spike de planejamento antes da interação onde nós vamos realmente refinar e priorizar a história de usuário em questão.

[03:29] Então essa funcionalidade muito difícil nós deixamos para a interação seguinte, depois do spike de planejamento, depois dessa prova de conceito.

[03:38] E tem que sempre lembrar que o spike serve para diminuir o risco da estimativa, para nós adquirirmos um pouco de conhecimento e nós *não* vamos aproveitar o código dessa prova de conceito.

[03:50] Esse código vai ser descartado, por que? Nós vamos fazer correndo, nós vamos fazer sem se preocupar com a qualidade, talvez nem tenha testes, isso vai ser jogado fora, nada vai ser reaproveitado e nós vamos refazer o código pensando já em como resolver, nós já temos um conhecimento sobre a solução, mas pensando também na qualidade que é um ponto crucial quando nós falamos de XP.
*** Práticas de Codificação
**** Padrão de codificação
[00:30] E a primeira prática que nós vamos falar é uma prática muito simples, muito tranquila de entender que é a de padrão de codificação, existe uma frase que eu já citei em algum momento desse treinamento do Uncle Bob que 

	"A quantia de tempo gasto lendo código versus escrevendo e bem mais de 10 para 1"
	
então nós acabamos gastando dez vezes ou mais de tempo lendo o código do que escrevendo, então fazer o código mais fácil de ler torna ele mais fácil de escrever.

[01:00] Então nós precisamos facilitar a leitura do código para que novo código seja escrito de forma simples também, seja feito de forma fácil.

[01:08] Então, se um time XP, se em um time todo mundo está trabalhando junto, refatorando parte, adicionando nova funcionalidade, corrigindo bug, não pode ter padrão diferente.

[01:21] Nesse pedaço de código eu abro as chaves embaixo da linha, nesse outro aqui eu abro do mesmo lado, essa variável está com letra maiúscula, essa outra aqui está com underline.

[01:30] Então isso não faz bem, isso acaba tirando a atenção de quem está lendo o código e parece besteira mas realmente tira. Isso atrapalha muito na hora de nós lermos algo que nós vamos dar manutenção, vamos corrigir um bug, nós acabamos perdendo tempo, fica distraído com aquilo ao invés de focar no problema.

[01:52] Então um padrão é necessário e ele deve facilitar a comunicação entre o time, sempre e inclusive isso ajuda muito na posse coletiva, porque se todo o código está escrito seguindo o mesmo padrão, todo mundo tem a coragem, todo mundo tem a vontade e a segurança para corrigir um problema em qualquer lugar e adicionar uma funcionalidade me qualquer luga, isso evita problemas com programação em par, que nós vamos falar mais para frente.

[02:44] E é muito válido citar que diversas linguagens já sugerem um próprio padrão, o Java tem o Java Code Conventions, a Google fornece convenções e estilos de código para várias linguagens como C, C++, python, o PHP possui as PCR que são o grande padrão da comunidade, enfim, se a sua linguagem fornece um padrão siga o padrão da sua linguagem que é o melhor que você pode fazer.

**** TDD
[00:21] Primeiro uma frase do Kent Beck, 

	"Eu não sou um excelente programador, sou apenas um bom programador com excelentes hábitos."

[00:29] Talvez você esteja pensando, que cara prepotente dizendo que tem excelentes hábitos, quem é esse tal de Kent Beck? Ele não só é um dos criadores dessa metodologia XP, mas ele também é um criador de um dos primeiros, eu me arrisco a dizer, o primeiro framework de testes automatizados seguindo o padrão xUnit, que é o padrão mais famoso de criação de testes que nós temos hoje.

[00:53] O que acontece? Esse cara bolou um framework para automatizar testes que pessoas faziam de forma mais rudimentar, então ele vive para criar testes, ele é uma pessoa muito influente na área de testes e ele também é o autor dessa metodologia de TDD, pelo menos um dos precursores e um dos grandes incentivadores e evangelistas dessa metodologia.

[01:17] No que que consiste essa ideia de TDD? TDD é um técnica simples para construção de software, onde guia o desenvolvimento por meio da escrita de testes.

[01:46] E o ciclo sugerido pela metodologia TDD, pela técnica TDD é, você primeiro escreve um teste, antes mesmo de ter o código, por exemplo, vou criar uma nova funcionalidade, cria um teste automatizado para ela, só que a funcionalidade ainda não existe, então esse teste vai falhar.

[02:04] Depois de ter criado o teste, você cria o código real que vai fazer esse teste passar, só que você vai criar da forma mais simples possível, só garantindo que o teste passe, depois que o teste estiver passando você vai tomar o tempo para refatorar esse código e nós já já falamos mais sobre refatoração, mas basicamente você vai melhorar o código.

[02:26] E feito isso, refatorado, parte para o próximo ciclo, escreve um teste para uma nova funcionalidade, implementa ela, refatora.
**** Integração Contínua
[00:10] E essa prática é a de integração contínua, então vamos dar uma olhada nessa frasezinha aqui do Martin Fowler que é outro grande gênio da tecnologia do desenvolvimento, 

	"A integração contínua não livra os bugs mas os torna dramaticamente mais fáceis de encontrar e remover"

então só dessa frase nós já entendemos que a integração contínua vai nos ajudar a encontrar possíveis problemas.

[00:34] Então integração contínua ou IC é uma prática, basicamente é isso, como nós temos falado de várias outras práticas e onde o código que está sendo desenvolvido pelo time, ele é integrado, versionado, construído, verificado diversas vezes num dia, em um ambiente dedicado.

[00:51] Então basicamente, eu Vinícius estou desenvolvendo, você que está assistindo está desenvolvendo também, nós estamos lá codificando, faz um commit, envia uma modificação, o que acontece?

[01:01] Através da integração contínua essa modificação seja uma correção de bug ou uma nova feature vai gerar, vai desencadear um processo de verificação se os testes estão funcionando, se tem cobertura de código suficiente nos testes, verifica se o padrão de codificação está correto, verifica a qualidade de código no geral, faz o build, garante que a compilação está rodando, enfim, executa uma série de tarefas que garantem a qualidade do nosso sistema.

[01:29] Então só programadores extremos, os programadores XP devem integrar e fazer commit em um só versão do repositório de código, ou seja, tem que existir um repositório onde todos os desenvolvedores fazem commit, então aquele repositório centralizado, um servidor de versionamento, por exemplo, um servido Git onde todo mundo vai fazer push, simples assim.

[01:53] E cada integração vai ser verificada por um build, com testes automatizados, detectando erros o mais cedo possível e fazendo diversas outras verificações possíveis.
**** Refatoração
[00:13] Então essa está diretamente relacionada a codificação que é a refatoração e a refatoração é uma prática muito importante nessa metodologia e inclusive eu tenho sempre trazido algumas frases interessantes relacionadas a cada prática mas para essa eu trouxe duas.

[00:28] A primeira é do Martin Fowler


	"Qualquer tolo pode escrever código que o computador possa entender, mas bons programadores escrevem códigos que humanos possam entender."

[00:39] E uma outra frase que é acho que é a minha preferida:

	"Sempre deixe o código mais limpo do que quando você o encontrou"

essa é basicamente a regra do bom escoteiro que o Uncle Bob trouxe para a área de desenvolvimento de software.

[01:53] Então resumindo, refatoração é a técnica de pegar um código que já funciona, manter ele funcionando só que agora com design de código melhor, ou seja, melhorar o código, basicamente isso é refatoração.

[02:06] E lembrando que isso faz parte do ciclo de TDD, nós escrevemos o teste falhando, implementa o código e depois refatora para que ele fique mais legível, mais fácil de manter e de evoluir.

[02:20] Existe um gráfico bastante famoso, então tem várias versões, eu peguei esse aqui que tem cores mas basicamente isso mostra como a famosa dívida técnica pode afetar o nosso sistema.

(AP: Ver image: "./refatoracao.jpg")
[02:33] Deixa eu pegar o apontador e eu tenho aqui um gráfico onde no eixo Y é o custo e no eixo X é o tempo, então eixo horizontal tempo, eixo vertical é o custo, quanto custa para adicionar uma nova funcionalidade ao decorrer do tempo e aqui nessa linha verde é se eu escrever o meu código pensando em qualidade, boas práticas de programação e refatorando, o principal.

[03:00] Então repara que inicialmente se eu estou me preocupando com a qualidade vai custar um pouco mais para desenvolver a mesma funcionalidade do que se eu escrever de qualquer jeito.

[03:12] Mas com o passar do tempo como eu mantenho a qualidade, o custo vai se mantendo mais ou menos constante, ele não aumenta tanto, agora se eu faço o código de qualquer jeito, com o passar do tempo o custo de desenvolver uma nova funcionalidade aumenta muito e esse delta aqui, essa diferença é o que é conhecido como *dívida técnica*.

[03:33] Então basicamente *uma dívida técnica é algo que poderia ter sido melhorado no seu software mas não foi*, uma melhoria que você poderia ter implementado que facilitaria evolução do código ou inclusive auxiliaria na atualização de tecnologias por exemplo.

[03:50] Se você trabalha com PHP e PHP está na versão, no momento da gravação desse vídeo 7.4, se você trabalha na versão 5.6 do PHP, você tem uma dívida técnica enorme, então se você está trabalhando com Java numa versão antiga, também é uma dívida técnica, se o código não foi bem escrito, você tem muita dívida técnica e isso vai ser cobrado aqui com o custo de evolução de sistema.

[04:14] Então basicamente refatoração é isso, é essa técnica de tornar o código mais legível e obviamente nós temos vários cursos aqui na Alura que podem te ajudar com isso.

**** Daily
[00:00] Bem-vindos de volta e vamos lá falar de uma prática que está naquela seção de codificação da big picture do XP, mas não é diretamente ligado a como nós escrevemos código, então vamos falar sobre a reunião diária em pé, ou se você já conhece Scrum, a famosa Daily Scrum, vamos lá.

[00:20] Uma frase bem interessante aqui, 

	"Ter as melhores ideias do código mais afinado, ou o pensamento mais pragmático é em última instancia, estéril, a menos que você possa se comunicar com outras pessoas."

[00:31] O que que essa frase pesada aqui quer dizer, esse tapa na cara? Quer dizer que não adianta nada você ser uma pessoa que desenvolve muito bem com ótimas qualidades técnicas se você não souber se comunicar, reportar seu status, deixar com que a equipe saiba o que você está fazendo para que todos possam trabalhar como equipe propriamente dito.

[00:52] Então a reunião diária em pé vem justamente para preencher esse gap de comunicação, para garantir que o time se mantenha coeso como é uma prática e que tenha posse coletiva, que todo mundo saiba o que está acontecendo com o sistema.

Pro/AP: Há 3 perguntas a serem respondidas na Daily: O que fiz ontem? O que pretendo fazer hoje? Existe algum impedimento?
**** Pair programming
[00:08] Então o que que é a programação em par, antes de nós falarmos da prática, vamos dar uma olhada nessa frase bem interessante:

	"Dados olhos suficientes, todos os erros são óbvios."

[00:18] Então isso quer dizer que o conhecimento compartilhado, existe uma teoria do conhecimento compartilhado que diz que nenhuma pessoa pode possuir tanto conhecimento quanto todas as pessoas juntas, então é mais ou menos o que isso quer dizer.

[00:31] Mas vamos para prática, está muito filosófico isso aqui, nós conhecemos o processo de peer review, que inclusive é muito utilizado em meios acadêmicos, revisão de papers acadêmicos.

[00:43] Então nós já sabemos que isso é uma boa prática e foi trazido para o mundo de desenvolvimento, então é muito comum que quando você termina de desenvolver você chama um par, chama um colega para que ele revise o código que você acabou de implementar, te dê sugestões, etc.

[00:57] Isso e um pouco diferente do code review onde você envia o código para um revisor, no peer review é uma pessoa do seu lado ou mais de uma pessoa olhando com você na hora.

[01:08] Então já que nós sabemos que isso é uma boa prática, inclusive é produtivo, traz códigos melhores, por que não programar e revisar em pares o tempo todo?

[01:18] Na ideia do XP, uma equipe XP, um equipe extrema produz todo o código de produção em par utilizando o que é conhecido como pair programming, ou programação em par.

[01:30] Isso significa literalmente ter duas pessoas programando, uma chamada de piloto e a outra chamada de copiloto, pela analogia de aviação onde o piloto controla realmente os controles do avião e o copiloto cuida da navegação e passa informações extra.

[01:46] E o que o XP indica é programar em par quando o código for criado, agora outras tarefas não necessariamente precisam ser feitas em par, por exemplo, pesquisar uma solução, fazer leituras de código, leituras de soluções, de novas tecnologias, isso não tem necessidade de fazer em par, mas quando código de produção for escrito incluindo os testes, obviamente, nesses momentos a recomendação é programar em par.

[02:14] Alguns pontos interessantes a citar são que trabalhar em par obviamente exige algumas habilidades sociais, nem todo mundo é extrovertido ou vai se sentir bem no início, só que isso aumenta a cooperação do time, mantém de novo o time mais coeso, a posse coletiva tem mais de uma pessoa trabalhando naquele código ao mesmo tempo, melhora a comunicação e inclusive o respeito.

[02:36] Então é muito interessante essa prática independentemente da função de cada um dos integrantes, pode ser dois sêniores, dois júniores, um sênior e um júnior, isso não interfere.

[02:47] E é importante citar que programar em par não é mentoria, é um trabalho colaborativo, os dois estão ali em pé de igualdade, então nunca vai acontecer de uma solução que foi implementada e um dos dois não gostou não pode chegar e falar, aquele código que você fez não está legal não, não, é o código que nós fizemos, é um trabalho colaborativo, aquele código é do par, é dos dois.
***** vantagens do pair programming
****** revisão de código contínua
[03:10] Então vamos falar de algumas vantagens porque obviamente tem vantagens trabalhar em par, revisão de código contínua tem sempre uma outra pessoa olhando o código ali e entendendo a linha de raciocínio,
****** discussão também contínua da solução
então existe a possibilidade de atingir uma solução um pouco melhor do que com uma pessoa só, 
****** afinamento do par
nós acabamos tendo mais intimidade com o colega e ganhando mais sinergia entre as pessoas.
****** aprendizagem
[03:37] Aprendizagem obviamente, com outra pessoa você vai conseguir aprender, não só sobre o sistema em si mas talvez até sobre tecnologias, engenharias de software.
****** gestão do conhecimento
[03:47] A gestão do conhecimento que é justamente esse ponto que eu comentei, as vezes uma pessoa conhece muito do sistema pode parear com outra que não entende tanto para que outra aprenda, 
****** trabalho colaborativo 
o trabalho colaborativo que incentiva o respeito e a comunicação e motivação.
****** motivação
[04:02] Eu quando trabalhei utilizando pair programming, infelizmente não é o cenário mais hoje, quando eu trabalhei com isso era realmente bastante motivador porque nós sempre tentávamos melhorar, porque nós aprendíamos bastante e ensinava bastante e se mantinha bastante motivado então é bem interessante.
***** Preocupações geradas
[04:18] Só que algumas preocupações são levantadas, 
	"o que? Dois programadores fazendo o trabalho de um? Sem condições, nem rola"
isso normalmente é dito por um gerente que não conhece a produtividade de benefícios de pair programming, ou pessoas que ainda pensam naquele processo clássico de uma pessoa por estação de trabalho, vamos dizer assim, só que desenvolver software é uma atividade complexa, não é para nós tentarmos aplicar processos fabris nisso.

[04:47] Então a pessoa que é responsável pelo processo de agilidade, o coach, é interessante que ele fique atento a organização do ambiente, que ele deixe com que as pessoas estejam cientes das vantagens.

[05:00] Duas pessoas trabalhando no mesmo computador geralmente elas tendem a produzir mais e melhor do que elas trabalhando separadas, então isso é bastante interessante porque aumenta o foco, aumenta a troca de conhecimento o que faz com que no longo prazo as funcionalidades sejam desenvolvidas de forma mais rápida, então, teoricamente, no longo prazo as vantagens começam a aparecer.

[05:23] Segundo algumas literaturas no curto prazo as vantagens já aparecem e foi minha realidade, com pouco tempo em pair programming nós já vimos uma boa melhoria no desenvolvimento do projeto onde eu trabalhei, então é realmente bem interessante.
***** Trabalho em equipe
[05:37] E quando nós falamos de pair programming é trabalho em equipe, então existem algumas dicas para que nós façamos isso de forma mais agradável, por exemplo:
****** Sua ideia primeiro
sugerir no início de uma programação em par que a ideia do seu colega seja o ponto inicial, então, "sua ideia é primeiro, pode começar", isso mostra respeito e faz com que aquela seção de pair programming flua de forma mais suave.
****** Pensar alto
[05:59] Pensar alto, então ao invés de ficar só olhando para o código enquanto pensa, fala o que você está pensando para que o copiloto, para a pessoa que está acompanhando consiga entender a sua linha de raciocínio.
****** Regra de dez segundos
[06:09] Existe uma regra de dez segundos, quando o piloto, quando a pessoa que está digitando o código parece estar concentrada numa linha de raciocínio não muito linear, espera dez segundos para tentar entender aquela linha de raciocínio antes de intervir e dar a sua opinião para não desviar o pensamento.
****** Ciclo de tempo
[06:27] E revezar é muito importante, não pode ser uma pessoa escrevendo e a outra olhando o tempo todo, precisa acontecer um revezamento, isso pode ser, por exemplo, por tempo, então você define um alarme e a cada quinze minutos vocês revezam, a cada meia hora você revezam, 
****** Ciclo de TDD
pode ser por ciclo do TDD, uma pessoa escreve o código de testes, a outra implementa, depois volta mais uma e refatora, então existem várias formas de revezar.
** AP: coisas mais importantes do curso
Papel do desenvolvedor: *É autogerenciado, o que significa que ele tem a responsabilidade e a autonomia para organizar e gerenciar seu próprio trabalho;*
