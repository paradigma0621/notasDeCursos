* 01_Design de código vs Arquitetura de softwar
Arquitetura: visão de mais alto nível de como será modelado o sistema. ex: comunicação entre as camadas (Exemplo: comunicação entre camadas "domain" e "repository")

Design de código: baixo nível.  Como escrever cada classe. Implementação de código (Exemplo: DRY, SOLID, padrões de projeto,  Domain Driven Design (DDD))

Importante lembrar que arquitetura de softeware é um dos tipos de arquitura (outros tipos: arquitetura de computadores, arquitetura de sistemas, etc)

Fazendo uma analogia: arquitetura de software está para o trabalho de construir uma planta de uma casa x design de código está para como disporemos os móveis dessa casa, cor das paredes, etc.

* 02_O que é arquitetura hexagonal?
"Ports and Adapters" ou "Arquitetura Hexagonal"

toda vez que o professor falava de "regra de domínio" ele mostrava o texto:  "Business Logic" no centro do hexagono da arquitetura hexagonal

Arquitetura diz:
1) quais componentes vamos criar
2) como os componentes vão se organizar na aplicação (qual componente vai poder se comunicar com quem)

Intenção:
isolar o domínio/regras de negócio de todo o resto fica num mundo externo (ex: do banco de dados). Nossa regra de negocios conhece apenas interfaces de comunicação

Podemos ter formas diferentes de tratar as entradas por portas diferentes
"adapter" pode ser um controller

temos 2 tipos de adapters
- primários: que recebem dados e enviam para regra de negocio (ex: requisição HTTP, aplicação na linha de comandos)
- secundários: enviam dados da regra de aplicação para o exterior da aplicação (ex: banco de dados, sistema de mensageria, uma outra API através de HTTP)


* 03_Clean Architecture (Arquitetura Limpa) - O que é?
arquitetura hexagonal pode ser aplicada na Arquitetura Limpa.
ideia tanto de arquitetura hexagonal como de clean arquitecture é isolar o domínio (mas não dizem como fazer isso)

MVC é uma arquitetura de software

Hoje o mvc não tem como intenção de ser um padrão arquitetural completo. A Clean Architecture tem a intenção de definir de como vai ser a camada Model desse MVC.

clean archetecture
todos vêem a camada "Entities", mas ela não vê ninguém
As camadas mais externas vêem as camadas mais internas, mas
as camadas mais internas não vêem as camadas mais externas

Entities, segundo o DDD: uma entidade é um tipo de classe que possui uma identidade (ed: CPF de uma pessoa)

Use Cases (ex: Services)

Controllers (ex: adaptadores vistos na aula passada)

a camada externa só tem detalhes de infraestrutura
* 04_Domain-Driven Design (DDD) - O que é?
Domain-Driven Design: o código pr ecisa refletir a realidade do negócio

** O DDD divide alguns padrões entre "Padrões Estratégicos" x "Padrões Táticos". 
*** 1) Padrões Estratégicos
- Linguagem ubíqua: se a Alura vai implementar o sistema dela, a entidade aluno deve chamar "Aluno" ou "Student"
- Contextos delimitados: ex: exemplos de possíveis contextos de um sistema da Alura poderia ser: acadêmico, gameficação, ...
- Domínio e subdomínio: ex: domínios possíveis da Alura: domínio principal (o que faz a empresa ser a empresa, o núcleo): "acadêmico", subdomínio: gameficação
*** 2) Padrões Táticos
- Blocos de construção: entidades, repositórios, ...
** DDD é um padrão arquitetural?
DDD não é um padrão arquitetural, está mais para uma filosofia de desenvolvimento onde se busca atender ao requisitos do domínio/negócio. 

*** Exemplo de "Padrão Tático": 
É muito comum pegarmos os conceitos da arquitetura sugerida no livro de DDD e aplicar dentro de um padrão arquitetural. Basicamente, pegamos os bloquinhos da imagem "04_Domain-Driven Design-01.png" que descreve um DDD e traduzimos para dentro de um padrão arquitetural, como, por exemplo o Clean Architecture - ficando:
- camada de "User Interface": ex: endpoint http que uma API recebe
- camada de "Application" (aplicação): pode ser entendida como a camada de "Uses Cases" da Clean architecture
- a camada de "Domain" (Domínio - é onde o sistema realmente está) contém os conceitos: entidades, repositórios, eventos, módulos, serviços, ... 
- Infrastructure: é tudo o que apoia o domínio: conexão com banco de dados, realização de log, envio de emails
* 05_O que é Mensageria?
2 sistemas fazem troca de mensagem assíncronamente

O  professor, ao invés de ir entregar um pacote pessoalmente, para um destinatário, ele delega para o Correios.
Ao ir pessoalmente ele poderia não encontrar ninguém na casa de destino, ou uma pessoa lá não poderia atende-lo, etc.
Delegando para os correios (Message Broker), a empresa ou pessoa especializada em entregar mensagens cuida de todo trabalho, podendo lidar com os casos de desencontros acima, por exemplo.

Exemplos de mensageria: SQS da Amazon, Kafka.
Event Bus: implementado através de serviços de mensageria (ex: Kafka)
* 06_Modelagem de eventos  (**** TODO - PREENCHER)
* 07_O que é uma arquitetura orientada a eventos?
Comunicação entre diversos componentes de uma arquitetura pode ser um assunto bastante complexo. Uma arquitetura orientada a eventos (Event-driven Architecture) pode fazer com que essa comunicação seja feita de forma assíncrona, permitindo maior escalabilidade do sistema como um todo.

Qualquer arquitutra que se utilize eventos como uma forma de se comunicar por ser chamada de Arquitetura Orientada a Eventos.

A ideia é desacoplar a comunicação

A complexidade aumenta, mas ganha-se em escalabilidade:
 - 1) Escalabilidade horizontal (adicionar mais instâncias: mais servidores). A longo prazo reduz custos
 - 2) Escalabilidade vertical (adicionar mais hardware: memória, melhor processador)
 - 3) Escalabilidade em profundidade (mais utilizada em armazenamento de dados)
  
  
Vantagem: pode-se realizar o processamento dos dados posteriormente - o sistema consegue lidar melhar com cenários de falha. Pode-se por exemplo receber um pedido, e retornar uma mensagem para o usuário que a requisição foi recebida, e processá-lo assincronamente.
  
Event Bus: implementado através de serviços de mensageria
  

Existem outras técnicas possíveis se utilizar:
1) Event sourcing: garantir que cada modificação de um estado de uma aplicação é capturada em um evento, e que esses eventos são armazenados em sequência. Toda mudança de estado não vai alterar o que já foi feito. É possível recriar qualquer aplicação do zero a qualquer momento. Se precisar ler algo, a partir da leitura de todos eventos é possível. Exemplo de uso: Git, onde os eventos são os commits. Ele armazena as modificações


